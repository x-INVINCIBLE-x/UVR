//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/Samples/XR Interaction Toolkit/3.0.7/Starter Assets/XRI Default Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Samples/XR Interaction Toolkit/3.0.7/Starter Assets/XRI Default Input Actions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @XRIDefaultInputActions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @XRIDefaultInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRI Default Input Actions"",
    ""maps"": [
        {
            ""name"": ""XRI Head"",
            ""id"": ""09ff3ccc-21b4-4346-a3a2-7c978b5af892"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""1a9029f8-7a46-46b9-9eff-e9ae8365f611"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""aed87fe6-2b01-4dd2-a8fa-195578fd8158"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""6bb4e248-e42b-47c3-b66c-79566508ca74"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""08654a17-c094-4bbd-8946-415ae4ce2406"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Eye Gaze Position"",
                    ""type"": ""Value"",
                    ""id"": ""dde820a2-0462-4756-be47-630b5b56c115"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Eye Gaze Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""8ac32629-4403-4068-aae5-2cd243e230c2"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Eye Gaze Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""ea26ba43-844b-4585-817a-2f124b571813"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Eye Gaze Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""73053154-2fbc-4d78-9cac-000282b64f79"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cff1f981-6e1f-4e2c-a90c-715a0ea2e80e"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d22c160-9642-4784-bed3-f108d9099185"",
                    ""path"": ""<HandheldARInputDevice>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2017383-a3f6-4c46-acb1-012b8eece9cc"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30a88e64-475a-4a1c-aca0-80b6a2bc3327"",
                    ""path"": ""<HandheldARInputDevice>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""fd9bd2d1-a464-4069-bf55-7f7a3cdb5a96"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""ef9a3bee-0af0-4688-81d3-49c2d9be0def"",
                    ""path"": ""<EyeGaze>/pose/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""aaf13e7c-a814-4c6e-9349-042da0cb27e9"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""3e829ba4-2fad-45ea-8114-7670f0e484be"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""0cf0b092-6006-474b-9cf5-dc4039450f39"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""872dc9a3-bab9-4b3f-9f84-8d12371f1f67"",
                    ""path"": ""<EyeGaze>/pose/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""2f870b88-8825-4a62-b02e-b5a523723446"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""eaececb1-b4a3-4b47-83c2-60562a364085"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Integer Fallback"",
                    ""id"": ""1a6685cf-ae82-4f22-a967-75610a8e71ed"",
                    ""path"": ""IntegerFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Tracking State"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""0dc9d652-871d-4ba5-94a1-50cf8218009a"",
                    ""path"": ""<EyeGaze>/pose/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""9bbd034f-9254-4dd5-9df7-d84f53b0bc8d"",
                    ""path"": ""<XRHMD>/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""d5e35a2f-03c4-432a-8e5e-d200278bf0a9"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""43a7b1a1-e99a-4346-a058-5b68c535729d"",
                    ""path"": ""<XRHMD>/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15eff92f-dac7-4e6e-986c-08b3f1e73fac"",
                    ""path"": ""<XRHMD>/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Button Fallback"",
                    ""id"": ""c262df21-2ffb-4295-93cc-8fdb5649da7e"",
                    ""path"": ""ButtonFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Is Tracked"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""f77492f8-09ee-49d0-b821-7c31cb5c2a16"",
                    ""path"": ""<EyeGaze>/pose/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""960252ae-88e8-427a-ac9f-ecac6fb3c7d1"",
                    ""path"": ""<XRHMD>/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""dfc94c22-a115-471f-9f17-8cb6bc7f6637"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""XRI Left"",
            ""id"": ""5fe596f9-1b7b-49b7-80a7-3b5195caf74d"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""83a7af0b-87e3-42c3-a909-95fbf8091e4f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""cb6b7130-2bac-4ef7-abe4-6991ae7d419d"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""82eb6741-beef-48d3-83ab-a957dc1caa1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""d20fc51c-7916-43a7-8b03-706049966aea"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""664a62b0-e178-421d-b3f8-014eec01591d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim Position"",
                    ""type"": ""Value"",
                    ""id"": ""c73a0160-3d9b-4dde-96f9-6a390e68778c"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""f208faac-e869-4280-ac9c-9b3d0ab819bb"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Meta Aim Flags"",
                    ""type"": ""Value"",
                    ""id"": ""f98e71db-49b4-4882-8991-a0e386733e87"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pinch Position"",
                    ""type"": ""Value"",
                    ""id"": ""cac52a91-5970-4ad2-8c86-a8c0e91a1837"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Poke Position"",
                    ""type"": ""Value"",
                    ""id"": ""4c557d81-3795-4355-a83e-6f886221d011"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Poke Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""0565b7f7-f841-4395-98df-a77f4dd6d9c9"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grip Position"",
                    ""type"": ""Value"",
                    ""id"": ""e1240870-ef45-4f3e-8110-ff1b9049c4ca"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grip Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""41873a55-b316-4dbe-96e6-93477eef5e47"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Thumbstick"",
                    ""type"": ""Value"",
                    ""id"": ""c01850c4-700b-4ae6-a187-a894afef5bbd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""61466a56-4ee4-47b1-aa6a-4806de1de5f2"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""afdcfbff-e241-4fdd-a6d1-23b0bf273360"",
                    ""path"": ""<XRController>{LeftHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""ed03d944-4c09-4c38-8b68-5c844e18ca7c"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""c98fc8c8-7fc6-4909-89b6-c5b7568e7275"",
                    ""path"": ""<XRHandDevice>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""14aeff85-d719-43ff-a124-b1cd7ca8686d"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""abf752ec-feee-4d51-b530-f0870f48acc9"",
                    ""path"": ""<XRController>{LeftHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""6580b669-0651-401c-9779-85ef22689130"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""ae101942-9eaa-4c53-a388-cafc3fd89bdf"",
                    ""path"": ""<XRHandDevice>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""acdf9550-5529-4ff7-8558-73ecdf0d75bd"",
                    ""path"": ""<XRController>{LeftHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97a0351f-659b-482a-8fa0-19015ccd055e"",
                    ""path"": ""<XRController>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34454fec-7610-497a-b1a5-d3d5f01b312c"",
                    ""path"": ""<XRHandDevice>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28df8d2f-b563-4377-bd11-6c8932ee591c"",
                    ""path"": ""<MetaAimHand>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ee39b25-fde6-4195-bc6e-68caadef9183"",
                    ""path"": ""<HandInteraction>{LeftHand}/pointer/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec4a1046-3843-445d-8ad4-a769823faa86"",
                    ""path"": ""<HandInteractionPoses>{LeftHand}/pointer/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d29757d4-ec35-4477-8a26-1d14acd14ba9"",
                    ""path"": ""<HoloLensHand>{LeftHand}/pointer/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2623b909-75bd-40da-97bd-ae1ecfb0a89b"",
                    ""path"": ""<MetaAimHand>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3ff2c3c-d1ef-40c9-8777-72ee03df3ff3"",
                    ""path"": ""<HandInteraction>{LeftHand}/pointer/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68633061-addf-447b-969e-06249302eaad"",
                    ""path"": ""<HandInteractionPoses>{LeftHand}/pointer/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4848899c-8c90-455a-a915-6422290f501b"",
                    ""path"": ""<HoloLensHand>{LeftHand}/pointer/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""aff6849b-544f-473c-9d7e-da40488aa6ab"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""e62f5918-8922-4a59-ae42-179b1fde0d29"",
                    ""path"": ""<XRHandDevice>{LeftHand}/pinchPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""1e9cdc2b-24e6-4624-9bd8-02c7dcf68fb4"",
                    ""path"": ""<HandInteraction>{LeftHand}/pinchPose/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""0adea6d4-f14c-4243-8217-dd63b6529bcc"",
                    ""path"": ""<HandInteractionPoses>{LeftHand}/pinchPose/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""2ef93166-d4e5-471d-8321-71e7cdec9220"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Poke Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""55020194-7022-4059-8424-8ecc0de92c13"",
                    ""path"": ""<XRHandDevice>{LeftHand}/pokePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Poke Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""9a8820cc-2172-4641-9fae-0c416b2649e2"",
                    ""path"": ""<HandInteraction>{LeftHand}/pokePose/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Poke Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""ef0a4717-47f8-47a3-8dae-fd0cba366115"",
                    ""path"": ""<HandInteractionPoses>{LeftHand}/pokePose/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Poke Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""892e5765-05a7-460a-942c-32e8a36bd441"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Poke Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""5f5fb46a-effc-4105-bb74-d30dc9cd1f43"",
                    ""path"": ""<XRHandDevice>{LeftHand}/pokeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Poke Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""8fba8372-e2dd-4a31-8048-45d49484323e"",
                    ""path"": ""<HandInteraction>{LeftHand}/pokePose/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Poke Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""8c1d4e9b-88f5-4966-a6e4-0f22f7bb896d"",
                    ""path"": ""<HandInteractionPoses>{LeftHand}/pokePose/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Poke Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f1de7b81-80d1-4207-8f19-4fb96a537bb3"",
                    ""path"": ""<XRController>{LeftHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9f33fe3-b3bf-48c1-a8bc-dd6a4ddfba94"",
                    ""path"": ""<XRHandDevice>{LeftHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""286f44f6-74a5-4f92-8468-42445c7a3cb8"",
                    ""path"": ""<MetaAimHand>{LeftHand}/aimFlags"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Meta Aim Flags"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21a4b6f9-1ebe-434f-b572-066a77b04c48"",
                    ""path"": ""<XRHandDevice>{LeftHand}/gripPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grip Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c1f9e74-aba4-41d6-b519-90ed563be5d7"",
                    ""path"": ""<XRHandDevice>{LeftHand}/gripRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grip Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0123e5fd-aec0-4ab3-b201-2e6c65d2b93e"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thumbstick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI Left Interaction"",
            ""id"": ""7a5e7537-cc30-4eb1-a544-6946baa8f3eb"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""33754c03-48ec-46ef-9bc6-22ed6bfdd8e8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Value"",
                    ""type"": ""Value"",
                    ""id"": ""e6005f29-e4c1-4f3b-8bf7-3a28bab5ca9c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Activate"",
                    ""type"": ""Button"",
                    ""id"": ""0c0991c5-d329-4afc-8892-1076b440477c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate Value"",
                    ""type"": ""Value"",
                    ""id"": ""0c3d0ec9-85a1-45b3-839b-1ca43f859ecd"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UI Press"",
                    ""type"": ""Button"",
                    ""id"": ""7e1eced7-c774-4fe5-be8f-d8711f646d9e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UI Press Value"",
                    ""type"": ""Value"",
                    ""id"": ""f241c1aa-1050-4338-b2bf-a4a47776693d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UI Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""a5372626-7022-4ba7-b152-6f26318fd8a8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""InvertVector2(invertY=false)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Translate Manipulation"",
                    ""type"": ""Value"",
                    ""id"": ""bfa204c7-3c92-4193-bad1-39eb71920042"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Manipulation"",
                    ""type"": ""Value"",
                    ""id"": ""21b75b25-12ad-410f-b4f8-a7745b7aca27"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Directional Manipulation"",
                    ""type"": ""Value"",
                    ""id"": ""93bd97c5-fd23-4853-8045-1b12324aa24e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scale Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""80ed7d74-56de-473c-bf76-da3bdd16b562"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scale Over Time"",
                    ""type"": ""Value"",
                    ""id"": ""2257500c-1efb-4f69-a54d-ed5db2708616"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""XHold"",
                    ""type"": ""Button"",
                    ""id"": ""a4a8c479-c7d5-45d6-aebf-c52b4be16524"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""XAbilityActivate"",
                    ""type"": ""Button"",
                    ""id"": ""7326f9bd-658a-443b-b33f-35c656e913ed"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""XDoubleTap"",
                    ""type"": ""Button"",
                    ""id"": ""cfcabbb4-ea97-4482-8394-74255b106902"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""YHold"",
                    ""type"": ""Button"",
                    ""id"": ""e119a8ce-7cd4-4d0a-84ce-561afb11a4cf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""YAbilityActivate"",
                    ""type"": ""Button"",
                    ""id"": ""31c7e4e9-91e9-426f-9bf8-e974fe1997d2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""YDoubleTab"",
                    ""type"": ""Button"",
                    ""id"": ""c2784c2a-c4a7-4051-82e9-b1305d28b00a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoystickPress"",
                    ""type"": ""Button"",
                    ""id"": ""565f9d85-4f0c-4898-bceb-6c1f864769d8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""71a4d23f-3e9a-4513-923b-ba388c5e84bf"",
                    ""path"": ""<XRController>{LeftHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73325635-d9e5-481a-9279-ae7be089422d"",
                    ""path"": ""<MetaAimHand>{LeftHand}/indexPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3bbf9f24-2edd-41b9-8456-683298f1e58c"",
                    ""path"": ""<HandInteraction>{LeftHand}/graspFirm"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a86585c7-1d41-40e2-a7ca-bb76cca5c32a"",
                    ""path"": ""<HandInteraction>{LeftHand}/pinchTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebab6345-d4f7-4a42-94b3-12d4464de218"",
                    ""path"": ""<HoloLensHand>{LeftHand}/squeezePressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4636f2d1-ca4c-4277-accd-2b68e8a7f229"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49a23327-a116-48c0-8af9-0d2c50c15a88"",
                    ""path"": ""<XRController>{LeftHand}/{Grip}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""304be843-4b23-45d9-89fa-005ac163d9b9"",
                    ""path"": ""<MetaAimHand>{LeftHand}/pinchStrengthIndex"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a4b758a-252a-484c-9a26-438954189c08"",
                    ""path"": ""<HandInteraction>{LeftHand}/graspValue"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc272ed6-7655-4292-9c21-e5b87bec4350"",
                    ""path"": ""<HandInteraction>{LeftHand}/pinchValue"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8d99ae3-e736-4370-ad5e-9fa45cb7a1be"",
                    ""path"": ""<HoloLensHand>{LeftHand}/squeeze"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""962970d3-15d9-4dcb-9d7a-466cc21802c9"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""487f4f2e-9e9b-49aa-b0f2-4037a24624f5"",
                    ""path"": ""<XRController>{LeftHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea8cd386-7a61-442c-a892-9d1c8051c515"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b8b1b59-2fdc-4998-8259-50341075d9a2"",
                    ""path"": ""<XRController>{LeftHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d3dde7a-9e90-4512-8d5d-1350a85b2b30"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b34c79c1-ab5e-4851-87ac-abc43705eae0"",
                    ""path"": ""<XRController>{LeftHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5bf6a12-a026-46d1-a793-7252c49aaf66"",
                    ""path"": ""<MetaAimHand>{LeftHand}/indexPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc8b2287-429e-4be4-a34b-cca7c50eeb52"",
                    ""path"": ""<HandInteraction>{LeftHand}/pointerActivated"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca931b95-39e0-4db1-9887-f5a5f68298d4"",
                    ""path"": ""<HoloLensHand>{LeftHand}/selectPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71d94579-1bf4-4034-ab9e-e7166842128f"",
                    ""path"": ""<XRController>{LeftHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d250c9be-4bf2-4b5c-8962-4fcf5d53bdb3"",
                    ""path"": ""<MetaAimHand>{LeftHand}/pinchStrengthIndex"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4c2fc93-75fe-4910-95ca-6b1cc163a48a"",
                    ""path"": ""<HandInteraction>{LeftHand}/pointerActivateValue"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7b5ae56-e532-43a3-a053-8d66df507df1"",
                    ""path"": ""<HoloLensHand>{LeftHand}/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ed313a6-c966-4669-8a62-4bb2319d485b"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Rotate Manipulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b30ca4b-9f98-4a44-9af5-a89412d5cdc8"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UI Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f872fc5-75dc-49e5-9bbd-f2e4d4498c65"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxisClick}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scale Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b21d690b-51fc-413f-a887-08a2a39af3fc"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0),StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Scale Over Time"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5fe0ed53-b4d3-4cd8-b567-397a7d1e1c6a"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directional Manipulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""370f21e3-a80b-4b07-990b-299c2da0929a"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Translate Manipulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ce6572f-ce66-493e-99e7-7fd6c2ecb5d5"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Translate Manipulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd4395e6-16c0-4063-a526-cbc956918a12"",
                    ""path"": ""<XRController>{LeftHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""XAbilityActivate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff57bb36-98b3-4899-b015-c2a261c963ff"",
                    ""path"": ""<XRController>{LeftHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""XDoubleTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0960d1a-5b6d-4b48-8929-2b53a59de8ce"",
                    ""path"": ""<XRController>{LeftHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""XHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c5b3a09-1d4b-43de-a9ff-740aa410dd6a"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""XHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3fbf032c-79b2-4a79-a39f-b7e7044fe066"",
                    ""path"": ""<XRController>{LeftHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YAbilityActivate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e30f5e83-1d27-4ccf-98f2-d8b24b719950"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YAbilityActivate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c813e256-245d-4c28-9533-f3a830d53e9e"",
                    ""path"": ""<XRController>{LeftHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YDoubleTab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa5feb3d-2aff-486c-9ae9-b93af343e428"",
                    ""path"": ""<XRController>{LeftHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ebaa04e-f57f-47c8-a61d-fd4d5dae6e92"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoystickPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7e83053-a10a-4df9-898d-0760c12e1546"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxisClick}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoystickPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI Left Locomotion"",
            ""id"": ""22336389-9fb1-4c2c-8635-0ed30db0d29e"",
            ""actions"": [
                {
                    ""name"": ""Teleport Mode"",
                    ""type"": ""Value"",
                    ""id"": ""a21db72c-4843-4839-b4d0-3ce8d287cb86"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Mode Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""89ce8348-6001-41a3-85b9-f8f2e2dcad7c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""9164e093-ebd4-4923-af32-1b52f31c2d66"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Snap Turn"",
                    ""type"": ""Value"",
                    ""id"": ""8c14e969-a054-4f12-840c-4e0bd85173d9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9693e25f-8a4f-4aed-842f-3961243c69a1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grab Move"",
                    ""type"": ""Button"",
                    ""id"": ""c5a6d766-d487-42ae-b293-da4749469e18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8da6ed3a-f621-49fe-8c76-1f6b7d7754d6"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8aebee7-fa03-43d4-bfb7-77a3f87452cc"",
                    ""path"": ""<XRController>{LeftHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport Mode Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99cb7ad1-51ec-4611-af68-92a85f2c17d6"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e383b1a-270f-4c20-819b-89a59cffb498"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8520dc50-f5ae-4628-84aa-ff6b4207b688"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e2fa814-8cbd-4c65-a60d-a1503f30ffd8"",
                    ""path"": ""<XRController>{LeftHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a46b49d0-0754-4dac-a9a5-a822e10751f2"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Snap Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI Right"",
            ""id"": ""7960f8ef-2bf3-4281-aecc-4c03809d6c8c"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""c4990d70-7b8a-4ce1-b03c-da86716b8352"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""ee6bf5bf-bb0a-4a50-8327-cb654b19e298"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""a705ffe4-b2c8-4b78-847f-25257d4e30af"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""167ea203-5bfb-4d74-bde9-8026b7483102"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""57b2a1b4-3290-46d6-ac07-4854ee8f91b1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim Position"",
                    ""type"": ""Value"",
                    ""id"": ""daf49d5d-4ba8-4bf7-9010-e7cae2096907"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""148c182f-63ef-4709-8057-f6ea8070cb5c"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Meta Aim Flags"",
                    ""type"": ""Value"",
                    ""id"": ""93a75a21-033e-440c-9954-ff264afb2db9"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pinch Position"",
                    ""type"": ""Value"",
                    ""id"": ""7a2e5dcd-3e49-4622-90ea-6607994f2be0"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Poke Position"",
                    ""type"": ""Value"",
                    ""id"": ""496d56bd-afd7-495b-a326-16e4ef742bc1"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Poke Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""3767652c-5427-421b-8f8d-660106453cb1"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grip Position"",
                    ""type"": ""Value"",
                    ""id"": ""defe4495-ba8f-4958-b2fb-98d889e45ac5"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grip Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""6bc56065-b0db-4265-8cef-5c7d4f40128a"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Thumbstick"",
                    ""type"": ""Value"",
                    ""id"": ""b8c0ccd3-e1b6-4913-96b3-e0864c9ac6bd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""84e51e1c-1b95-4f3e-a61f-29da6c1f0816"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""3722d501-eb80-4f61-9361-08a5ea7a1394"",
                    ""path"": ""<XRController>{RightHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""2e6ad191-d5aa-4919-aac6-295c83387a72"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""b9ecb60d-341e-47cf-b50a-41d5815af8b0"",
                    ""path"": ""<XRHandDevice>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""74e968f1-ad08-4a82-a68d-764517faecef"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""9717e367-64a4-440a-9974-1e641d753eb2"",
                    ""path"": ""<XRController>{RightHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""0794a41d-29ef-48ec-a452-6b7de29b52fa"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""3ef0a781-60c5-48bc-a584-f95553f8ae0a"",
                    ""path"": ""<XRHandDevice>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6011e1e6-b2dd-4cb1-8da5-29b03868f2c5"",
                    ""path"": ""<XRController>{RightHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03ccbaec-eeca-4fc4-8281-ee1758b4eb9b"",
                    ""path"": ""<XRController>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""714d1173-f908-4bca-951c-4adb4eb7b4c5"",
                    ""path"": ""<XRHandDevice>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd822fc8-c655-4a4d-87d0-9575760b6dca"",
                    ""path"": ""<MetaAimHand>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e60d7767-705f-4af2-ae42-f135e6580630"",
                    ""path"": ""<HandInteraction>{RightHand}/pointer/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d34dafcf-a3a4-4511-a73f-1ecbfd6099c8"",
                    ""path"": ""<HandInteractionPoses>{RightHand}/pointer/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""720d5e83-6877-4504-9b4a-aa550c2593af"",
                    ""path"": ""<HoloLensHand>{RightHand}/pointer/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2bb1158a-2d78-446b-9351-6f9b3f1364cb"",
                    ""path"": ""<MetaAimHand>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""256fbef4-95a6-4127-ac3e-6a259b640666"",
                    ""path"": ""<HandInteraction>{RightHand}/pointer/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d46291b9-775e-457b-a909-649a301d55c3"",
                    ""path"": ""<HandInteractionPoses>{RightHand}/pointer/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fac2635-e015-4fb7-9578-34b85a5d5797"",
                    ""path"": ""<HoloLensHand>{RightHand}/pointer/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""0323576b-ec88-4459-a791-4afeada3f7c8"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""0bdf98f1-d1a8-443f-805e-9718b34fc6ea"",
                    ""path"": ""<XRHandDevice>{RightHand}/pinchPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""0bd62ec6-1259-40f6-aa0a-71b82a790764"",
                    ""path"": ""<HandInteraction>{RightHand}/pinchPose/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""7271c456-534a-4e51-9835-1ebd589a938e"",
                    ""path"": ""<HandInteractionPoses>{RightHand}/pinchPose/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""5724159b-b0ee-4458-b567-63874ee6e24a"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Poke Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""3f5ff135-3cfa-48b6-a35c-aa52badc1d6e"",
                    ""path"": ""<XRHandDevice>{RightHand}/pokePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Poke Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""c46e492c-1618-4d10-8c99-3079cf9deda6"",
                    ""path"": ""<HandInteraction>{RightHand}/pokePose/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Poke Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""34b9f870-767e-422c-b558-0708567a1a5d"",
                    ""path"": ""<HandInteractionPoses>{RightHand}/pokePose/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Poke Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""74a5f1ad-f8ed-42cf-aff3-eb911325ca7d"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Poke Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""595c1ccb-9c05-411a-a2fd-e892ca0c9091"",
                    ""path"": ""<XRHandDevice>{RightHand}/pokeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Poke Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""d7ce6129-ec94-4757-9595-aaf1032cae86"",
                    ""path"": ""<HandInteraction>{RightHand}/pokePose/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Poke Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""0e7b9607-caf5-46cc-adb9-2a1500c718a4"",
                    ""path"": ""<HandInteractionPoses>{RightHand}/pokePose/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Poke Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1de48aee-890b-4dbb-a02d-51df9bd39db7"",
                    ""path"": ""<XRController>{RightHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a0c4fe0-639a-44e0-beeb-4e11e0dea7ef"",
                    ""path"": ""<XRHandDevice>{RightHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5469d4d1-9645-4397-a596-d74f876eafc2"",
                    ""path"": ""<MetaAimHand>{RightHand}/aimFlags"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Meta Aim Flags"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efcaf94e-8faa-439e-983b-c65f79c3b743"",
                    ""path"": ""<XRHandDevice>{RightHand}/gripPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grip Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70a747b6-46e8-4d3b-aaec-20bcab8f1dd7"",
                    ""path"": ""<XRHandDevice>{RightHand}/gripRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grip Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""709cc921-f3b0-4dc8-88d4-7787b8a3ced1"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thumbstick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI Right Interaction"",
            ""id"": ""461bce25-7762-40c5-b639-f190649be6d6"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""ac96c10b-c955-4a46-8e67-bf16bc069b53"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Value"",
                    ""type"": ""Value"",
                    ""id"": ""39bbf1ac-21a3-413d-90f6-6dbf6efeaabe"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Activate"",
                    ""type"": ""Button"",
                    ""id"": ""41976d89-60de-4deb-bff9-16b4af96b290"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate Value"",
                    ""type"": ""Value"",
                    ""id"": ""c3ca6ed7-3d25-44a2-b1d8-5be4eb699370"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UI Press"",
                    ""type"": ""Button"",
                    ""id"": ""65174b45-c2ee-4f90-93bb-fb4084eaaab3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UI Press Value"",
                    ""type"": ""Value"",
                    ""id"": ""962ac033-ec42-4981-88a4-551ad9be6ecb"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UI Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""c283b939-751f-426e-8462-142a529993e3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""InvertVector2(invertY=false)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Translate Manipulation"",
                    ""type"": ""Value"",
                    ""id"": ""6f7cf253-7062-443b-b10f-2be48a33f027"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Manipulation"",
                    ""type"": ""Value"",
                    ""id"": ""9b5d8312-f609-4895-b70f-81a722b2ae11"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Directional Manipulation"",
                    ""type"": ""Value"",
                    ""id"": ""b950a329-6492-4e29-b563-afc726f81e95"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scale Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""5ad73d15-99a4-4bce-a76f-f49815602416"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scale Over Time"",
                    ""type"": ""Value"",
                    ""id"": ""19a21f59-bd21-4f77-b29d-4fda26ef6769"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""6f038075-c324-4d23-ace4-64d7a640eb93"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""B"",
                    ""type"": ""Button"",
                    ""id"": ""ddd03ab2-6304-49e4-bee5-c524ea8c773a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightJoystickPress"",
                    ""type"": ""Button"",
                    ""id"": ""0883aa04-0f9e-420d-bad4-df29b3062fda"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1ce80054-410d-4112-a332-50faa7fb4f23"",
                    ""path"": ""<XRController>{RightHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d5b47ea-64e3-4b99-b620-de6c360908be"",
                    ""path"": ""<MetaAimHand>{RightHand}/indexPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1fe3ab58-51f3-4274-995c-176ac72d9610"",
                    ""path"": ""<HandInteraction>{RightHand}/graspFirm"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6083118-4e38-45a2-afaf-52fa60444f78"",
                    ""path"": ""<HandInteraction>{RightHand}/pinchTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82f232f1-6246-4d1e-aacc-a7ccc16c76d9"",
                    ""path"": ""<HoloLensHand>{RightHand}/squeezePressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b2d4aa7-ed1d-4588-9fa2-85ae66bdfea9"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd433817-216c-46b9-8dd3-f3a4ea1767b9"",
                    ""path"": ""<XRController>{RightHand}/{Grip}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""770a07b5-a199-4342-b4a5-b3baafbe2bcb"",
                    ""path"": ""<MetaAimHand>{RightHand}/pinchStrengthIndex"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8d22d4b-ac0c-452b-9f5e-247f94754302"",
                    ""path"": ""<HandInteraction>{RightHand}/graspValue"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c850e784-816f-4df7-8759-a725cb4a84bf"",
                    ""path"": ""<HandInteraction>{RightHand}/pinchValue"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e890a130-d436-4b52-a092-bff81d18bfb7"",
                    ""path"": ""<HoloLensHand>{RightHand}/squeeze"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b912faed-4a20-43c5-9279-f37885b38150"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa59aed1-ae0b-4074-a58c-294b85f46228"",
                    ""path"": ""<XRController>{RightHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02475fc7-94a5-4aa3-8880-34de642d0cc9"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50a2d6bd-de6c-4170-aad8-81bff2f69981"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""150f414f-61bf-47b1-b4f8-f772a2a40565"",
                    ""path"": ""<XRController>{RightHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7188fd53-a734-4365-8503-1c9b9f8e06a5"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92bb5b8f-bf48-4dab-af05-50a865773895"",
                    ""path"": ""<XRController>{RightHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1652c26e-d835-461f-b46b-55b146fd9bba"",
                    ""path"": ""<MetaAimHand>{RightHand}/indexPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ae41e93-9c2b-4d15-8387-0eddbc823053"",
                    ""path"": ""<HandInteraction>{RightHand}/pointerActivated"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8a900c7-8116-4f44-9d24-8f19caf07108"",
                    ""path"": ""<HoloLensHand>{RightHand}/selectPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b4ef08d-9ddd-4f0a-8539-d1114d14d143"",
                    ""path"": ""<XRController>{RightHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""620cd3c3-a8c2-4a24-825a-ef6eb1cb41ef"",
                    ""path"": ""<MetaAimHand>{RightHand}/pinchStrengthIndex"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4bfac4d7-1bce-4fa7-a6b1-00eb7e5f346e"",
                    ""path"": ""<HandInteraction>{RightHand}/pointerActivateValue"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2fbf204-5031-483f-beaa-abf05113dbc7"",
                    ""path"": ""<HoloLensHand>{RightHand}/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c0fa06c-b670-477f-a95d-eb3b4880e439"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(y=0),StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Rotate Manipulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af6fd279-2f48-4f51-8e9d-29b0b9d926f8"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UI Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8258e49-f7cc-44d7-bc27-77c2161e2005"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxisClick}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scale Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef10c39a-2987-41bb-bb80-0e476240adaa"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0),StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Scale Over Time"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4b46d7d-8231-4672-83f9-75af565faf57"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directional Manipulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1733e638-087a-462a-8e93-1a0be3dfb44a"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directional Manipulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4caf4e8d-13e5-4bd6-8f42-b6b99c315ad0"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Translate Manipulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0541dd24-b24b-4b12-b8d0-603097eea57b"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Translate Manipulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""349311c8-eefc-4054-bf78-aa41c23172df"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3517e7fb-8428-43a5-a709-6fb6afd55d81"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b83e774d-6ab7-4616-b7be-0711557523f9"",
                    ""path"": ""<XRController>{RightHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3df81ada-5ae1-46be-bb34-5f28f22f4040"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6f9673f-4f6c-402e-a3c0-6b7b03b80fbc"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxisClick}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightJoystickPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dad17ab7-1178-45ff-894c-84bac2f7fdf8"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightJoystickPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI Right Locomotion"",
            ""id"": ""99ce76d3-82c5-4289-9670-2ecffa6833fd"",
            ""actions"": [
                {
                    ""name"": ""Teleport Mode"",
                    ""type"": ""Value"",
                    ""id"": ""a6c7231d-c55d-4dd4-9e87-877bb5522ef5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Mode Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""d587b60c-39a0-4365-8075-477ce484ba0f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""9fb2eb2b-2fb6-4328-8167-10a1bf11b424"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Snap Turn"",
                    ""type"": ""Value"",
                    ""id"": ""44441ad6-5762-466d-ad54-aa44fcd61a5c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""00a4dc9f-1ee6-4349-b0e9-72d5dccaadd6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grab Move"",
                    ""type"": ""Button"",
                    ""id"": ""cfb29d37-3db0-4e5d-a73b-7d48a19e279e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""62690862-4688-4010-975b-b3d9c6062157"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de466e6e-12bf-46a1-b0fd-ffbc343f3399"",
                    ""path"": ""<XRController>{RightHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport Mode Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6c08c3d-3d41-4695-994d-1ac9016a5a9e"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5cb52ab1-01a2-42cd-a7a6-ae4a67ce9b30"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""022046aa-be71-4288-859d-6dd42844f6e6"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ecb549e-ab98-4a4b-b979-38068fe3b811"",
                    ""path"": ""<XRController>{RightHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31d838df-4d4e-4c16-a373-b9c07d9d2e2a"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Snap Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI UI"",
            ""id"": ""edd65a7c-601c-4915-8307-025a081d8790"",
            ""actions"": [
                {
                    ""name"": ""Navigate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c9a92aca-49d5-4910-8ade-8e994f0a31f0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""eba98c2e-6268-4233-bb88-946287bc753c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""448b396b-0885-4543-ac5a-8b3405da6791"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""682022c0-857a-4332-8753-7f8fcdf84d37"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b194cd98-7e4f-457a-a60c-cebc25dc32a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ScrollWheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bd7fc534-75e3-489d-94fb-3d45cb78d8f3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddleClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cc5f5666-a75c-4dfc-8566-ded8ec9b4ae3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""533aeb95-18b2-4a83-a69d-f6e0be72ff8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e87fa299-8441-4620-89dd-0564c7d552e2"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""445a013e-9c17-48a2-9856-067e4826df03"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05c1e38e-79dd-41cb-95d5-74f42e65d92f"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57909bb4-1088-4975-9227-ecc87a305257"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2740386d-d4b6-4342-903c-d9390783f04a"",
                    ""path"": ""<Pen>/tip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6fd3bb5-c747-4eba-b599-1c6d7c738e2a"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb2286cc-fa20-4564-bff6-9f790f12cf6b"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MiddleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54eb7da2-546a-4d75-bfcc-ae38be303a59"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""4c9a5170-d325-45ee-8ef9-fc12d1f5a97e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c846c708-b27e-4ac9-9a83-c80ac5c263d5"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""caf2fb01-3e95-47c1-8663-315057149d48"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""830d65e9-887d-45b4-8386-562deb29e465"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e5c71442-9909-46d8-aa56-8fa3574a8227"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""210246e8-c3c4-4edc-be9c-1916858346df"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fb701ef0-9910-4639-80d1-2c1c03f871ed"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3de9f409-fb44-4311-8705-b4f4e7cd3029"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bd001ba1-d6a2-4a97-9c87-36b5b92728af"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fcc0a2cd-a126-43ad-bb1e-ffc1ae7668c7"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""65cbb13a-6e00-4973-9887-e49e06575091"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3c5803e2-42d0-4d48-bbd6-41ce4442df0b"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d5b1219c-0df6-4bc5-ad11-205b748cade4"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""065d2394-f10a-46df-b6cb-2c56a6c842ea"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""29921809-7785-44a1-a316-e96307174552"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""49817cc8-fecc-406d-a187-6393de317e95"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ef33431d-17d0-4e1c-90f2-bbaa2ef9a8b7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5ddfdce2-0f11-4f4e-8931-0ae6fb289ac7"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5ceab4e0-1600-4bfb-acf6-8d02c4e10aea"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""94e10d8b-5bfa-439d-afae-b975efac2b7b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9fc7d14a-385d-4ca5-b185-906e049b7eed"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d7e5e0c4-05dc-4f2f-8649-a66fe843caed"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""76ab9656-e168-4b2c-9a6b-d8d6da981e4f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ad7bc5b3-6ada-42a2-9cba-5c7334cba7be"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9f2a7c29-a588-4b6a-a966-955eb408c526"",
                    ""path"": ""*/{Submit}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67f51768-1493-4444-b118-82d398a16fdd"",
                    ""path"": ""*/{Cancel}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""198e6869-709e-448d-96d4-27186c9d56e6"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Touchscreen Gestures"",
            ""id"": ""6fb00339-a75a-4e5b-94e0-839f979f2a8a"",
            ""actions"": [
                {
                    ""name"": ""Tap Start Position"",
                    ""type"": ""Value"",
                    ""id"": ""0f53f821-ec5d-472c-bd12-fb5ce515ae59"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Drag Current Position"",
                    ""type"": ""Value"",
                    ""id"": ""07fd51be-2a34-4531-939c-ff750fcf8e4d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Drag Delta"",
                    ""type"": ""Value"",
                    ""id"": ""ccd1d49f-8e5b-4c66-8d2c-fb774934270b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pinch Start Position"",
                    ""type"": ""Value"",
                    ""id"": ""07f4446a-0f0c-4176-a67e-75be05a3be3c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pinch Gap"",
                    ""type"": ""Value"",
                    ""id"": ""c299ab55-2420-4eb1-a459-0af3846471b9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pinch Gap Delta"",
                    ""type"": ""Value"",
                    ""id"": ""d1d816b2-4bec-4393-bf83-a59146ee0abc"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Twist Start Position"",
                    ""type"": ""Value"",
                    ""id"": ""e476e037-f414-4b6d-ac4a-486d7228ec43"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Twist Delta Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""5910a9c0-4a90-4a2c-92cb-e33054cfd463"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Screen Touch Count"",
                    ""type"": ""Value"",
                    ""id"": ""c1e4b6b1-d82a-485c-9d29-9d42e48df255"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Spawn Object"",
                    ""type"": ""Button"",
                    ""id"": ""1415f3c5-fc5f-4f58-a044-4a69560151f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fea81b99-07f5-426a-beba-5e0832c14855"",
                    ""path"": ""<TouchscreenGestureInputController>/tapStartPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap Start Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""ccaca70d-b804-4cda-9dd1-ee9152fa6ec8"",
                    ""path"": ""OneModifier"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap Start Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""30c845d9-0972-4e51-92bf-2eee8171abc7"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap Start Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""9ab23efd-1004-4423-b9b9-b070db6cde4e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap Start Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""eb175a82-fad6-4249-bc9f-a6c9acee4436"",
                    ""path"": ""<TouchscreenGestureInputController>/dragCurrentPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag Current Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""2648faca-8c9b-4bcd-9653-fc9cfa39dbe3"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag Current Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""1f42a89b-32be-49d7-8153-507ff950cb3b"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag Current Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""7e88eed9-d5b6-4c3a-9dd7-ac83c45fced3"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag Current Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""40fc89b1-2773-4288-b02f-892fea9b7d48"",
                    ""path"": ""<TouchscreenGestureInputController>/twistDeltaRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Twist Delta Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""57cc64a3-de05-45d9-971f-764c0aa9efe5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Twist Delta Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""475bf595-e1da-44b6-8674-677260bd2dcf"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Twist Delta Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""05a801e2-b5df-4253-b3a9-ad2213853f57"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Twist Delta Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d919e652-0e4a-4f12-a1f9-b18cead206e2"",
                    ""path"": ""<TouchscreenGestureInputController>/fingerCount"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Screen Touch Count"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""044d4cc1-3ad7-4d38-a95f-994badd7e1a3"",
                    ""path"": ""<TouchscreenGestureInputController>/dragDelta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e3b31e7-2f82-40f3-bfe1-ad0fa7f035d4"",
                    ""path"": ""<TouchscreenGestureInputController>/pinchStartPosition1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch Start Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3092672-a026-446d-8bb6-44843db135b1"",
                    ""path"": ""<TouchscreenGestureInputController>/pinchGapDelta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch Gap Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6926b069-b36d-40c2-8325-797a8deb9038"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch Gap Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""da16ab02-4e2b-46f5-a969-c780423ac0e9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch Gap Delta"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""07794ffe-429a-49c7-93c1-83c4af6695f4"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch Gap Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c480645b-97d7-4c34-8797-7f9a24edb3c5"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch Gap Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0f8550ed-7261-48e0-aa0e-6670f29141f5"",
                    ""path"": ""<TouchscreenGestureInputController>/twistStartPosition1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Twist Start Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f94c62c-7c6d-4547-82fe-b6ed10da8388"",
                    ""path"": ""<TouchscreenGestureInputController>/pinchGap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch Gap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0f27c2a-eef2-418a-986a-811bf690fd89"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spawn Object"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""6f6c3123-8e3c-4f69-9ecc-2a605a5f8777"",
                    ""path"": ""OneModifier"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spawn Object"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""ab34c73d-e0f0-4cf2-962e-2c201f9c5714"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spawn Object"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""38c38fe4-fefa-4a01-a80a-6185ecb009cb"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spawn Object"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // XRI Head
        m_XRIHead = asset.FindActionMap("XRI Head", throwIfNotFound: true);
        m_XRIHead_Position = m_XRIHead.FindAction("Position", throwIfNotFound: true);
        m_XRIHead_Rotation = m_XRIHead.FindAction("Rotation", throwIfNotFound: true);
        m_XRIHead_IsTracked = m_XRIHead.FindAction("Is Tracked", throwIfNotFound: true);
        m_XRIHead_TrackingState = m_XRIHead.FindAction("Tracking State", throwIfNotFound: true);
        m_XRIHead_EyeGazePosition = m_XRIHead.FindAction("Eye Gaze Position", throwIfNotFound: true);
        m_XRIHead_EyeGazeRotation = m_XRIHead.FindAction("Eye Gaze Rotation", throwIfNotFound: true);
        m_XRIHead_EyeGazeIsTracked = m_XRIHead.FindAction("Eye Gaze Is Tracked", throwIfNotFound: true);
        m_XRIHead_EyeGazeTrackingState = m_XRIHead.FindAction("Eye Gaze Tracking State", throwIfNotFound: true);
        // XRI Left
        m_XRILeft = asset.FindActionMap("XRI Left", throwIfNotFound: true);
        m_XRILeft_Position = m_XRILeft.FindAction("Position", throwIfNotFound: true);
        m_XRILeft_Rotation = m_XRILeft.FindAction("Rotation", throwIfNotFound: true);
        m_XRILeft_IsTracked = m_XRILeft.FindAction("Is Tracked", throwIfNotFound: true);
        m_XRILeft_TrackingState = m_XRILeft.FindAction("Tracking State", throwIfNotFound: true);
        m_XRILeft_HapticDevice = m_XRILeft.FindAction("Haptic Device", throwIfNotFound: true);
        m_XRILeft_AimPosition = m_XRILeft.FindAction("Aim Position", throwIfNotFound: true);
        m_XRILeft_AimRotation = m_XRILeft.FindAction("Aim Rotation", throwIfNotFound: true);
        m_XRILeft_MetaAimFlags = m_XRILeft.FindAction("Meta Aim Flags", throwIfNotFound: true);
        m_XRILeft_PinchPosition = m_XRILeft.FindAction("Pinch Position", throwIfNotFound: true);
        m_XRILeft_PokePosition = m_XRILeft.FindAction("Poke Position", throwIfNotFound: true);
        m_XRILeft_PokeRotation = m_XRILeft.FindAction("Poke Rotation", throwIfNotFound: true);
        m_XRILeft_GripPosition = m_XRILeft.FindAction("Grip Position", throwIfNotFound: true);
        m_XRILeft_GripRotation = m_XRILeft.FindAction("Grip Rotation", throwIfNotFound: true);
        m_XRILeft_Thumbstick = m_XRILeft.FindAction("Thumbstick", throwIfNotFound: true);
        // XRI Left Interaction
        m_XRILeftInteraction = asset.FindActionMap("XRI Left Interaction", throwIfNotFound: true);
        m_XRILeftInteraction_Select = m_XRILeftInteraction.FindAction("Select", throwIfNotFound: true);
        m_XRILeftInteraction_SelectValue = m_XRILeftInteraction.FindAction("Select Value", throwIfNotFound: true);
        m_XRILeftInteraction_Activate = m_XRILeftInteraction.FindAction("Activate", throwIfNotFound: true);
        m_XRILeftInteraction_ActivateValue = m_XRILeftInteraction.FindAction("Activate Value", throwIfNotFound: true);
        m_XRILeftInteraction_UIPress = m_XRILeftInteraction.FindAction("UI Press", throwIfNotFound: true);
        m_XRILeftInteraction_UIPressValue = m_XRILeftInteraction.FindAction("UI Press Value", throwIfNotFound: true);
        m_XRILeftInteraction_UIScroll = m_XRILeftInteraction.FindAction("UI Scroll", throwIfNotFound: true);
        m_XRILeftInteraction_TranslateManipulation = m_XRILeftInteraction.FindAction("Translate Manipulation", throwIfNotFound: true);
        m_XRILeftInteraction_RotateManipulation = m_XRILeftInteraction.FindAction("Rotate Manipulation", throwIfNotFound: true);
        m_XRILeftInteraction_DirectionalManipulation = m_XRILeftInteraction.FindAction("Directional Manipulation", throwIfNotFound: true);
        m_XRILeftInteraction_ScaleToggle = m_XRILeftInteraction.FindAction("Scale Toggle", throwIfNotFound: true);
        m_XRILeftInteraction_ScaleOverTime = m_XRILeftInteraction.FindAction("Scale Over Time", throwIfNotFound: true);
        m_XRILeftInteraction_XHold = m_XRILeftInteraction.FindAction("XHold", throwIfNotFound: true);
        m_XRILeftInteraction_XAbilityActivate = m_XRILeftInteraction.FindAction("XAbilityActivate", throwIfNotFound: true);
        m_XRILeftInteraction_XDoubleTap = m_XRILeftInteraction.FindAction("XDoubleTap", throwIfNotFound: true);
        m_XRILeftInteraction_YHold = m_XRILeftInteraction.FindAction("YHold", throwIfNotFound: true);
        m_XRILeftInteraction_YAbilityActivate = m_XRILeftInteraction.FindAction("YAbilityActivate", throwIfNotFound: true);
        m_XRILeftInteraction_YDoubleTab = m_XRILeftInteraction.FindAction("YDoubleTab", throwIfNotFound: true);
        m_XRILeftInteraction_JoystickPress = m_XRILeftInteraction.FindAction("JoystickPress", throwIfNotFound: true);
        // XRI Left Locomotion
        m_XRILeftLocomotion = asset.FindActionMap("XRI Left Locomotion", throwIfNotFound: true);
        m_XRILeftLocomotion_TeleportMode = m_XRILeftLocomotion.FindAction("Teleport Mode", throwIfNotFound: true);
        m_XRILeftLocomotion_TeleportModeCancel = m_XRILeftLocomotion.FindAction("Teleport Mode Cancel", throwIfNotFound: true);
        m_XRILeftLocomotion_Turn = m_XRILeftLocomotion.FindAction("Turn", throwIfNotFound: true);
        m_XRILeftLocomotion_SnapTurn = m_XRILeftLocomotion.FindAction("Snap Turn", throwIfNotFound: true);
        m_XRILeftLocomotion_Move = m_XRILeftLocomotion.FindAction("Move", throwIfNotFound: true);
        m_XRILeftLocomotion_GrabMove = m_XRILeftLocomotion.FindAction("Grab Move", throwIfNotFound: true);
        // XRI Right
        m_XRIRight = asset.FindActionMap("XRI Right", throwIfNotFound: true);
        m_XRIRight_Position = m_XRIRight.FindAction("Position", throwIfNotFound: true);
        m_XRIRight_Rotation = m_XRIRight.FindAction("Rotation", throwIfNotFound: true);
        m_XRIRight_IsTracked = m_XRIRight.FindAction("Is Tracked", throwIfNotFound: true);
        m_XRIRight_TrackingState = m_XRIRight.FindAction("Tracking State", throwIfNotFound: true);
        m_XRIRight_HapticDevice = m_XRIRight.FindAction("Haptic Device", throwIfNotFound: true);
        m_XRIRight_AimPosition = m_XRIRight.FindAction("Aim Position", throwIfNotFound: true);
        m_XRIRight_AimRotation = m_XRIRight.FindAction("Aim Rotation", throwIfNotFound: true);
        m_XRIRight_MetaAimFlags = m_XRIRight.FindAction("Meta Aim Flags", throwIfNotFound: true);
        m_XRIRight_PinchPosition = m_XRIRight.FindAction("Pinch Position", throwIfNotFound: true);
        m_XRIRight_PokePosition = m_XRIRight.FindAction("Poke Position", throwIfNotFound: true);
        m_XRIRight_PokeRotation = m_XRIRight.FindAction("Poke Rotation", throwIfNotFound: true);
        m_XRIRight_GripPosition = m_XRIRight.FindAction("Grip Position", throwIfNotFound: true);
        m_XRIRight_GripRotation = m_XRIRight.FindAction("Grip Rotation", throwIfNotFound: true);
        m_XRIRight_Thumbstick = m_XRIRight.FindAction("Thumbstick", throwIfNotFound: true);
        // XRI Right Interaction
        m_XRIRightInteraction = asset.FindActionMap("XRI Right Interaction", throwIfNotFound: true);
        m_XRIRightInteraction_Select = m_XRIRightInteraction.FindAction("Select", throwIfNotFound: true);
        m_XRIRightInteraction_SelectValue = m_XRIRightInteraction.FindAction("Select Value", throwIfNotFound: true);
        m_XRIRightInteraction_Activate = m_XRIRightInteraction.FindAction("Activate", throwIfNotFound: true);
        m_XRIRightInteraction_ActivateValue = m_XRIRightInteraction.FindAction("Activate Value", throwIfNotFound: true);
        m_XRIRightInteraction_UIPress = m_XRIRightInteraction.FindAction("UI Press", throwIfNotFound: true);
        m_XRIRightInteraction_UIPressValue = m_XRIRightInteraction.FindAction("UI Press Value", throwIfNotFound: true);
        m_XRIRightInteraction_UIScroll = m_XRIRightInteraction.FindAction("UI Scroll", throwIfNotFound: true);
        m_XRIRightInteraction_TranslateManipulation = m_XRIRightInteraction.FindAction("Translate Manipulation", throwIfNotFound: true);
        m_XRIRightInteraction_RotateManipulation = m_XRIRightInteraction.FindAction("Rotate Manipulation", throwIfNotFound: true);
        m_XRIRightInteraction_DirectionalManipulation = m_XRIRightInteraction.FindAction("Directional Manipulation", throwIfNotFound: true);
        m_XRIRightInteraction_ScaleToggle = m_XRIRightInteraction.FindAction("Scale Toggle", throwIfNotFound: true);
        m_XRIRightInteraction_ScaleOverTime = m_XRIRightInteraction.FindAction("Scale Over Time", throwIfNotFound: true);
        m_XRIRightInteraction_A = m_XRIRightInteraction.FindAction("A", throwIfNotFound: true);
        m_XRIRightInteraction_B = m_XRIRightInteraction.FindAction("B", throwIfNotFound: true);
        m_XRIRightInteraction_RightJoystickPress = m_XRIRightInteraction.FindAction("RightJoystickPress", throwIfNotFound: true);
        // XRI Right Locomotion
        m_XRIRightLocomotion = asset.FindActionMap("XRI Right Locomotion", throwIfNotFound: true);
        m_XRIRightLocomotion_TeleportMode = m_XRIRightLocomotion.FindAction("Teleport Mode", throwIfNotFound: true);
        m_XRIRightLocomotion_TeleportModeCancel = m_XRIRightLocomotion.FindAction("Teleport Mode Cancel", throwIfNotFound: true);
        m_XRIRightLocomotion_Turn = m_XRIRightLocomotion.FindAction("Turn", throwIfNotFound: true);
        m_XRIRightLocomotion_SnapTurn = m_XRIRightLocomotion.FindAction("Snap Turn", throwIfNotFound: true);
        m_XRIRightLocomotion_Move = m_XRIRightLocomotion.FindAction("Move", throwIfNotFound: true);
        m_XRIRightLocomotion_GrabMove = m_XRIRightLocomotion.FindAction("Grab Move", throwIfNotFound: true);
        // XRI UI
        m_XRIUI = asset.FindActionMap("XRI UI", throwIfNotFound: true);
        m_XRIUI_Navigate = m_XRIUI.FindAction("Navigate", throwIfNotFound: true);
        m_XRIUI_Submit = m_XRIUI.FindAction("Submit", throwIfNotFound: true);
        m_XRIUI_Cancel = m_XRIUI.FindAction("Cancel", throwIfNotFound: true);
        m_XRIUI_Point = m_XRIUI.FindAction("Point", throwIfNotFound: true);
        m_XRIUI_Click = m_XRIUI.FindAction("Click", throwIfNotFound: true);
        m_XRIUI_ScrollWheel = m_XRIUI.FindAction("ScrollWheel", throwIfNotFound: true);
        m_XRIUI_MiddleClick = m_XRIUI.FindAction("MiddleClick", throwIfNotFound: true);
        m_XRIUI_RightClick = m_XRIUI.FindAction("RightClick", throwIfNotFound: true);
        // Touchscreen Gestures
        m_TouchscreenGestures = asset.FindActionMap("Touchscreen Gestures", throwIfNotFound: true);
        m_TouchscreenGestures_TapStartPosition = m_TouchscreenGestures.FindAction("Tap Start Position", throwIfNotFound: true);
        m_TouchscreenGestures_DragCurrentPosition = m_TouchscreenGestures.FindAction("Drag Current Position", throwIfNotFound: true);
        m_TouchscreenGestures_DragDelta = m_TouchscreenGestures.FindAction("Drag Delta", throwIfNotFound: true);
        m_TouchscreenGestures_PinchStartPosition = m_TouchscreenGestures.FindAction("Pinch Start Position", throwIfNotFound: true);
        m_TouchscreenGestures_PinchGap = m_TouchscreenGestures.FindAction("Pinch Gap", throwIfNotFound: true);
        m_TouchscreenGestures_PinchGapDelta = m_TouchscreenGestures.FindAction("Pinch Gap Delta", throwIfNotFound: true);
        m_TouchscreenGestures_TwistStartPosition = m_TouchscreenGestures.FindAction("Twist Start Position", throwIfNotFound: true);
        m_TouchscreenGestures_TwistDeltaRotation = m_TouchscreenGestures.FindAction("Twist Delta Rotation", throwIfNotFound: true);
        m_TouchscreenGestures_ScreenTouchCount = m_TouchscreenGestures.FindAction("Screen Touch Count", throwIfNotFound: true);
        m_TouchscreenGestures_SpawnObject = m_TouchscreenGestures.FindAction("Spawn Object", throwIfNotFound: true);
    }

    ~@XRIDefaultInputActions()
    {
        UnityEngine.Debug.Assert(!m_XRIHead.enabled, "This will cause a leak and performance issues, XRIDefaultInputActions.XRIHead.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_XRILeft.enabled, "This will cause a leak and performance issues, XRIDefaultInputActions.XRILeft.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_XRILeftInteraction.enabled, "This will cause a leak and performance issues, XRIDefaultInputActions.XRILeftInteraction.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_XRILeftLocomotion.enabled, "This will cause a leak and performance issues, XRIDefaultInputActions.XRILeftLocomotion.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_XRIRight.enabled, "This will cause a leak and performance issues, XRIDefaultInputActions.XRIRight.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_XRIRightInteraction.enabled, "This will cause a leak and performance issues, XRIDefaultInputActions.XRIRightInteraction.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_XRIRightLocomotion.enabled, "This will cause a leak and performance issues, XRIDefaultInputActions.XRIRightLocomotion.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_XRIUI.enabled, "This will cause a leak and performance issues, XRIDefaultInputActions.XRIUI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_TouchscreenGestures.enabled, "This will cause a leak and performance issues, XRIDefaultInputActions.TouchscreenGestures.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // XRI Head
    private readonly InputActionMap m_XRIHead;
    private List<IXRIHeadActions> m_XRIHeadActionsCallbackInterfaces = new List<IXRIHeadActions>();
    private readonly InputAction m_XRIHead_Position;
    private readonly InputAction m_XRIHead_Rotation;
    private readonly InputAction m_XRIHead_IsTracked;
    private readonly InputAction m_XRIHead_TrackingState;
    private readonly InputAction m_XRIHead_EyeGazePosition;
    private readonly InputAction m_XRIHead_EyeGazeRotation;
    private readonly InputAction m_XRIHead_EyeGazeIsTracked;
    private readonly InputAction m_XRIHead_EyeGazeTrackingState;
    /// <summary>
    /// Provides access to input actions defined in input action map "XRI Head".
    /// </summary>
    public struct XRIHeadActions
    {
        private @XRIDefaultInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public XRIHeadActions(@XRIDefaultInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "XRIHead/Position".
        /// </summary>
        public InputAction @Position => m_Wrapper.m_XRIHead_Position;
        /// <summary>
        /// Provides access to the underlying input action "XRIHead/Rotation".
        /// </summary>
        public InputAction @Rotation => m_Wrapper.m_XRIHead_Rotation;
        /// <summary>
        /// Provides access to the underlying input action "XRIHead/IsTracked".
        /// </summary>
        public InputAction @IsTracked => m_Wrapper.m_XRIHead_IsTracked;
        /// <summary>
        /// Provides access to the underlying input action "XRIHead/TrackingState".
        /// </summary>
        public InputAction @TrackingState => m_Wrapper.m_XRIHead_TrackingState;
        /// <summary>
        /// Provides access to the underlying input action "XRIHead/EyeGazePosition".
        /// </summary>
        public InputAction @EyeGazePosition => m_Wrapper.m_XRIHead_EyeGazePosition;
        /// <summary>
        /// Provides access to the underlying input action "XRIHead/EyeGazeRotation".
        /// </summary>
        public InputAction @EyeGazeRotation => m_Wrapper.m_XRIHead_EyeGazeRotation;
        /// <summary>
        /// Provides access to the underlying input action "XRIHead/EyeGazeIsTracked".
        /// </summary>
        public InputAction @EyeGazeIsTracked => m_Wrapper.m_XRIHead_EyeGazeIsTracked;
        /// <summary>
        /// Provides access to the underlying input action "XRIHead/EyeGazeTrackingState".
        /// </summary>
        public InputAction @EyeGazeTrackingState => m_Wrapper.m_XRIHead_EyeGazeTrackingState;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_XRIHead; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="XRIHeadActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(XRIHeadActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="XRIHeadActions" />
        public void AddCallbacks(IXRIHeadActions instance)
        {
            if (instance == null || m_Wrapper.m_XRIHeadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRIHeadActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @IsTracked.started += instance.OnIsTracked;
            @IsTracked.performed += instance.OnIsTracked;
            @IsTracked.canceled += instance.OnIsTracked;
            @TrackingState.started += instance.OnTrackingState;
            @TrackingState.performed += instance.OnTrackingState;
            @TrackingState.canceled += instance.OnTrackingState;
            @EyeGazePosition.started += instance.OnEyeGazePosition;
            @EyeGazePosition.performed += instance.OnEyeGazePosition;
            @EyeGazePosition.canceled += instance.OnEyeGazePosition;
            @EyeGazeRotation.started += instance.OnEyeGazeRotation;
            @EyeGazeRotation.performed += instance.OnEyeGazeRotation;
            @EyeGazeRotation.canceled += instance.OnEyeGazeRotation;
            @EyeGazeIsTracked.started += instance.OnEyeGazeIsTracked;
            @EyeGazeIsTracked.performed += instance.OnEyeGazeIsTracked;
            @EyeGazeIsTracked.canceled += instance.OnEyeGazeIsTracked;
            @EyeGazeTrackingState.started += instance.OnEyeGazeTrackingState;
            @EyeGazeTrackingState.performed += instance.OnEyeGazeTrackingState;
            @EyeGazeTrackingState.canceled += instance.OnEyeGazeTrackingState;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="XRIHeadActions" />
        private void UnregisterCallbacks(IXRIHeadActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @IsTracked.started -= instance.OnIsTracked;
            @IsTracked.performed -= instance.OnIsTracked;
            @IsTracked.canceled -= instance.OnIsTracked;
            @TrackingState.started -= instance.OnTrackingState;
            @TrackingState.performed -= instance.OnTrackingState;
            @TrackingState.canceled -= instance.OnTrackingState;
            @EyeGazePosition.started -= instance.OnEyeGazePosition;
            @EyeGazePosition.performed -= instance.OnEyeGazePosition;
            @EyeGazePosition.canceled -= instance.OnEyeGazePosition;
            @EyeGazeRotation.started -= instance.OnEyeGazeRotation;
            @EyeGazeRotation.performed -= instance.OnEyeGazeRotation;
            @EyeGazeRotation.canceled -= instance.OnEyeGazeRotation;
            @EyeGazeIsTracked.started -= instance.OnEyeGazeIsTracked;
            @EyeGazeIsTracked.performed -= instance.OnEyeGazeIsTracked;
            @EyeGazeIsTracked.canceled -= instance.OnEyeGazeIsTracked;
            @EyeGazeTrackingState.started -= instance.OnEyeGazeTrackingState;
            @EyeGazeTrackingState.performed -= instance.OnEyeGazeTrackingState;
            @EyeGazeTrackingState.canceled -= instance.OnEyeGazeTrackingState;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="XRIHeadActions.UnregisterCallbacks(IXRIHeadActions)" />.
        /// </summary>
        /// <seealso cref="XRIHeadActions.UnregisterCallbacks(IXRIHeadActions)" />
        public void RemoveCallbacks(IXRIHeadActions instance)
        {
            if (m_Wrapper.m_XRIHeadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="XRIHeadActions.AddCallbacks(IXRIHeadActions)" />
        /// <seealso cref="XRIHeadActions.RemoveCallbacks(IXRIHeadActions)" />
        /// <seealso cref="XRIHeadActions.UnregisterCallbacks(IXRIHeadActions)" />
        public void SetCallbacks(IXRIHeadActions instance)
        {
            foreach (var item in m_Wrapper.m_XRIHeadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRIHeadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="XRIHeadActions" /> instance referencing this action map.
    /// </summary>
    public XRIHeadActions @XRIHead => new XRIHeadActions(this);

    // XRI Left
    private readonly InputActionMap m_XRILeft;
    private List<IXRILeftActions> m_XRILeftActionsCallbackInterfaces = new List<IXRILeftActions>();
    private readonly InputAction m_XRILeft_Position;
    private readonly InputAction m_XRILeft_Rotation;
    private readonly InputAction m_XRILeft_IsTracked;
    private readonly InputAction m_XRILeft_TrackingState;
    private readonly InputAction m_XRILeft_HapticDevice;
    private readonly InputAction m_XRILeft_AimPosition;
    private readonly InputAction m_XRILeft_AimRotation;
    private readonly InputAction m_XRILeft_MetaAimFlags;
    private readonly InputAction m_XRILeft_PinchPosition;
    private readonly InputAction m_XRILeft_PokePosition;
    private readonly InputAction m_XRILeft_PokeRotation;
    private readonly InputAction m_XRILeft_GripPosition;
    private readonly InputAction m_XRILeft_GripRotation;
    private readonly InputAction m_XRILeft_Thumbstick;
    /// <summary>
    /// Provides access to input actions defined in input action map "XRI Left".
    /// </summary>
    public struct XRILeftActions
    {
        private @XRIDefaultInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public XRILeftActions(@XRIDefaultInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "XRILeft/Position".
        /// </summary>
        public InputAction @Position => m_Wrapper.m_XRILeft_Position;
        /// <summary>
        /// Provides access to the underlying input action "XRILeft/Rotation".
        /// </summary>
        public InputAction @Rotation => m_Wrapper.m_XRILeft_Rotation;
        /// <summary>
        /// Provides access to the underlying input action "XRILeft/IsTracked".
        /// </summary>
        public InputAction @IsTracked => m_Wrapper.m_XRILeft_IsTracked;
        /// <summary>
        /// Provides access to the underlying input action "XRILeft/TrackingState".
        /// </summary>
        public InputAction @TrackingState => m_Wrapper.m_XRILeft_TrackingState;
        /// <summary>
        /// Provides access to the underlying input action "XRILeft/HapticDevice".
        /// </summary>
        public InputAction @HapticDevice => m_Wrapper.m_XRILeft_HapticDevice;
        /// <summary>
        /// Provides access to the underlying input action "XRILeft/AimPosition".
        /// </summary>
        public InputAction @AimPosition => m_Wrapper.m_XRILeft_AimPosition;
        /// <summary>
        /// Provides access to the underlying input action "XRILeft/AimRotation".
        /// </summary>
        public InputAction @AimRotation => m_Wrapper.m_XRILeft_AimRotation;
        /// <summary>
        /// Provides access to the underlying input action "XRILeft/MetaAimFlags".
        /// </summary>
        public InputAction @MetaAimFlags => m_Wrapper.m_XRILeft_MetaAimFlags;
        /// <summary>
        /// Provides access to the underlying input action "XRILeft/PinchPosition".
        /// </summary>
        public InputAction @PinchPosition => m_Wrapper.m_XRILeft_PinchPosition;
        /// <summary>
        /// Provides access to the underlying input action "XRILeft/PokePosition".
        /// </summary>
        public InputAction @PokePosition => m_Wrapper.m_XRILeft_PokePosition;
        /// <summary>
        /// Provides access to the underlying input action "XRILeft/PokeRotation".
        /// </summary>
        public InputAction @PokeRotation => m_Wrapper.m_XRILeft_PokeRotation;
        /// <summary>
        /// Provides access to the underlying input action "XRILeft/GripPosition".
        /// </summary>
        public InputAction @GripPosition => m_Wrapper.m_XRILeft_GripPosition;
        /// <summary>
        /// Provides access to the underlying input action "XRILeft/GripRotation".
        /// </summary>
        public InputAction @GripRotation => m_Wrapper.m_XRILeft_GripRotation;
        /// <summary>
        /// Provides access to the underlying input action "XRILeft/Thumbstick".
        /// </summary>
        public InputAction @Thumbstick => m_Wrapper.m_XRILeft_Thumbstick;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_XRILeft; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="XRILeftActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(XRILeftActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="XRILeftActions" />
        public void AddCallbacks(IXRILeftActions instance)
        {
            if (instance == null || m_Wrapper.m_XRILeftActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRILeftActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @IsTracked.started += instance.OnIsTracked;
            @IsTracked.performed += instance.OnIsTracked;
            @IsTracked.canceled += instance.OnIsTracked;
            @TrackingState.started += instance.OnTrackingState;
            @TrackingState.performed += instance.OnTrackingState;
            @TrackingState.canceled += instance.OnTrackingState;
            @HapticDevice.started += instance.OnHapticDevice;
            @HapticDevice.performed += instance.OnHapticDevice;
            @HapticDevice.canceled += instance.OnHapticDevice;
            @AimPosition.started += instance.OnAimPosition;
            @AimPosition.performed += instance.OnAimPosition;
            @AimPosition.canceled += instance.OnAimPosition;
            @AimRotation.started += instance.OnAimRotation;
            @AimRotation.performed += instance.OnAimRotation;
            @AimRotation.canceled += instance.OnAimRotation;
            @MetaAimFlags.started += instance.OnMetaAimFlags;
            @MetaAimFlags.performed += instance.OnMetaAimFlags;
            @MetaAimFlags.canceled += instance.OnMetaAimFlags;
            @PinchPosition.started += instance.OnPinchPosition;
            @PinchPosition.performed += instance.OnPinchPosition;
            @PinchPosition.canceled += instance.OnPinchPosition;
            @PokePosition.started += instance.OnPokePosition;
            @PokePosition.performed += instance.OnPokePosition;
            @PokePosition.canceled += instance.OnPokePosition;
            @PokeRotation.started += instance.OnPokeRotation;
            @PokeRotation.performed += instance.OnPokeRotation;
            @PokeRotation.canceled += instance.OnPokeRotation;
            @GripPosition.started += instance.OnGripPosition;
            @GripPosition.performed += instance.OnGripPosition;
            @GripPosition.canceled += instance.OnGripPosition;
            @GripRotation.started += instance.OnGripRotation;
            @GripRotation.performed += instance.OnGripRotation;
            @GripRotation.canceled += instance.OnGripRotation;
            @Thumbstick.started += instance.OnThumbstick;
            @Thumbstick.performed += instance.OnThumbstick;
            @Thumbstick.canceled += instance.OnThumbstick;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="XRILeftActions" />
        private void UnregisterCallbacks(IXRILeftActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @IsTracked.started -= instance.OnIsTracked;
            @IsTracked.performed -= instance.OnIsTracked;
            @IsTracked.canceled -= instance.OnIsTracked;
            @TrackingState.started -= instance.OnTrackingState;
            @TrackingState.performed -= instance.OnTrackingState;
            @TrackingState.canceled -= instance.OnTrackingState;
            @HapticDevice.started -= instance.OnHapticDevice;
            @HapticDevice.performed -= instance.OnHapticDevice;
            @HapticDevice.canceled -= instance.OnHapticDevice;
            @AimPosition.started -= instance.OnAimPosition;
            @AimPosition.performed -= instance.OnAimPosition;
            @AimPosition.canceled -= instance.OnAimPosition;
            @AimRotation.started -= instance.OnAimRotation;
            @AimRotation.performed -= instance.OnAimRotation;
            @AimRotation.canceled -= instance.OnAimRotation;
            @MetaAimFlags.started -= instance.OnMetaAimFlags;
            @MetaAimFlags.performed -= instance.OnMetaAimFlags;
            @MetaAimFlags.canceled -= instance.OnMetaAimFlags;
            @PinchPosition.started -= instance.OnPinchPosition;
            @PinchPosition.performed -= instance.OnPinchPosition;
            @PinchPosition.canceled -= instance.OnPinchPosition;
            @PokePosition.started -= instance.OnPokePosition;
            @PokePosition.performed -= instance.OnPokePosition;
            @PokePosition.canceled -= instance.OnPokePosition;
            @PokeRotation.started -= instance.OnPokeRotation;
            @PokeRotation.performed -= instance.OnPokeRotation;
            @PokeRotation.canceled -= instance.OnPokeRotation;
            @GripPosition.started -= instance.OnGripPosition;
            @GripPosition.performed -= instance.OnGripPosition;
            @GripPosition.canceled -= instance.OnGripPosition;
            @GripRotation.started -= instance.OnGripRotation;
            @GripRotation.performed -= instance.OnGripRotation;
            @GripRotation.canceled -= instance.OnGripRotation;
            @Thumbstick.started -= instance.OnThumbstick;
            @Thumbstick.performed -= instance.OnThumbstick;
            @Thumbstick.canceled -= instance.OnThumbstick;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="XRILeftActions.UnregisterCallbacks(IXRILeftActions)" />.
        /// </summary>
        /// <seealso cref="XRILeftActions.UnregisterCallbacks(IXRILeftActions)" />
        public void RemoveCallbacks(IXRILeftActions instance)
        {
            if (m_Wrapper.m_XRILeftActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="XRILeftActions.AddCallbacks(IXRILeftActions)" />
        /// <seealso cref="XRILeftActions.RemoveCallbacks(IXRILeftActions)" />
        /// <seealso cref="XRILeftActions.UnregisterCallbacks(IXRILeftActions)" />
        public void SetCallbacks(IXRILeftActions instance)
        {
            foreach (var item in m_Wrapper.m_XRILeftActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRILeftActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="XRILeftActions" /> instance referencing this action map.
    /// </summary>
    public XRILeftActions @XRILeft => new XRILeftActions(this);

    // XRI Left Interaction
    private readonly InputActionMap m_XRILeftInteraction;
    private List<IXRILeftInteractionActions> m_XRILeftInteractionActionsCallbackInterfaces = new List<IXRILeftInteractionActions>();
    private readonly InputAction m_XRILeftInteraction_Select;
    private readonly InputAction m_XRILeftInteraction_SelectValue;
    private readonly InputAction m_XRILeftInteraction_Activate;
    private readonly InputAction m_XRILeftInteraction_ActivateValue;
    private readonly InputAction m_XRILeftInteraction_UIPress;
    private readonly InputAction m_XRILeftInteraction_UIPressValue;
    private readonly InputAction m_XRILeftInteraction_UIScroll;
    private readonly InputAction m_XRILeftInteraction_TranslateManipulation;
    private readonly InputAction m_XRILeftInteraction_RotateManipulation;
    private readonly InputAction m_XRILeftInteraction_DirectionalManipulation;
    private readonly InputAction m_XRILeftInteraction_ScaleToggle;
    private readonly InputAction m_XRILeftInteraction_ScaleOverTime;
    private readonly InputAction m_XRILeftInteraction_XHold;
    private readonly InputAction m_XRILeftInteraction_XAbilityActivate;
    private readonly InputAction m_XRILeftInteraction_XDoubleTap;
    private readonly InputAction m_XRILeftInteraction_YHold;
    private readonly InputAction m_XRILeftInteraction_YAbilityActivate;
    private readonly InputAction m_XRILeftInteraction_YDoubleTab;
    private readonly InputAction m_XRILeftInteraction_JoystickPress;
    /// <summary>
    /// Provides access to input actions defined in input action map "XRI Left Interaction".
    /// </summary>
    public struct XRILeftInteractionActions
    {
        private @XRIDefaultInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public XRILeftInteractionActions(@XRIDefaultInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "XRILeftInteraction/Select".
        /// </summary>
        public InputAction @Select => m_Wrapper.m_XRILeftInteraction_Select;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftInteraction/SelectValue".
        /// </summary>
        public InputAction @SelectValue => m_Wrapper.m_XRILeftInteraction_SelectValue;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftInteraction/Activate".
        /// </summary>
        public InputAction @Activate => m_Wrapper.m_XRILeftInteraction_Activate;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftInteraction/ActivateValue".
        /// </summary>
        public InputAction @ActivateValue => m_Wrapper.m_XRILeftInteraction_ActivateValue;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftInteraction/UIPress".
        /// </summary>
        public InputAction @UIPress => m_Wrapper.m_XRILeftInteraction_UIPress;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftInteraction/UIPressValue".
        /// </summary>
        public InputAction @UIPressValue => m_Wrapper.m_XRILeftInteraction_UIPressValue;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftInteraction/UIScroll".
        /// </summary>
        public InputAction @UIScroll => m_Wrapper.m_XRILeftInteraction_UIScroll;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftInteraction/TranslateManipulation".
        /// </summary>
        public InputAction @TranslateManipulation => m_Wrapper.m_XRILeftInteraction_TranslateManipulation;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftInteraction/RotateManipulation".
        /// </summary>
        public InputAction @RotateManipulation => m_Wrapper.m_XRILeftInteraction_RotateManipulation;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftInteraction/DirectionalManipulation".
        /// </summary>
        public InputAction @DirectionalManipulation => m_Wrapper.m_XRILeftInteraction_DirectionalManipulation;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftInteraction/ScaleToggle".
        /// </summary>
        public InputAction @ScaleToggle => m_Wrapper.m_XRILeftInteraction_ScaleToggle;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftInteraction/ScaleOverTime".
        /// </summary>
        public InputAction @ScaleOverTime => m_Wrapper.m_XRILeftInteraction_ScaleOverTime;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftInteraction/XHold".
        /// </summary>
        public InputAction @XHold => m_Wrapper.m_XRILeftInteraction_XHold;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftInteraction/XAbilityActivate".
        /// </summary>
        public InputAction @XAbilityActivate => m_Wrapper.m_XRILeftInteraction_XAbilityActivate;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftInteraction/XDoubleTap".
        /// </summary>
        public InputAction @XDoubleTap => m_Wrapper.m_XRILeftInteraction_XDoubleTap;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftInteraction/YHold".
        /// </summary>
        public InputAction @YHold => m_Wrapper.m_XRILeftInteraction_YHold;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftInteraction/YAbilityActivate".
        /// </summary>
        public InputAction @YAbilityActivate => m_Wrapper.m_XRILeftInteraction_YAbilityActivate;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftInteraction/YDoubleTab".
        /// </summary>
        public InputAction @YDoubleTab => m_Wrapper.m_XRILeftInteraction_YDoubleTab;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftInteraction/JoystickPress".
        /// </summary>
        public InputAction @JoystickPress => m_Wrapper.m_XRILeftInteraction_JoystickPress;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_XRILeftInteraction; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="XRILeftInteractionActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(XRILeftInteractionActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="XRILeftInteractionActions" />
        public void AddCallbacks(IXRILeftInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_XRILeftInteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRILeftInteractionActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @SelectValue.started += instance.OnSelectValue;
            @SelectValue.performed += instance.OnSelectValue;
            @SelectValue.canceled += instance.OnSelectValue;
            @Activate.started += instance.OnActivate;
            @Activate.performed += instance.OnActivate;
            @Activate.canceled += instance.OnActivate;
            @ActivateValue.started += instance.OnActivateValue;
            @ActivateValue.performed += instance.OnActivateValue;
            @ActivateValue.canceled += instance.OnActivateValue;
            @UIPress.started += instance.OnUIPress;
            @UIPress.performed += instance.OnUIPress;
            @UIPress.canceled += instance.OnUIPress;
            @UIPressValue.started += instance.OnUIPressValue;
            @UIPressValue.performed += instance.OnUIPressValue;
            @UIPressValue.canceled += instance.OnUIPressValue;
            @UIScroll.started += instance.OnUIScroll;
            @UIScroll.performed += instance.OnUIScroll;
            @UIScroll.canceled += instance.OnUIScroll;
            @TranslateManipulation.started += instance.OnTranslateManipulation;
            @TranslateManipulation.performed += instance.OnTranslateManipulation;
            @TranslateManipulation.canceled += instance.OnTranslateManipulation;
            @RotateManipulation.started += instance.OnRotateManipulation;
            @RotateManipulation.performed += instance.OnRotateManipulation;
            @RotateManipulation.canceled += instance.OnRotateManipulation;
            @DirectionalManipulation.started += instance.OnDirectionalManipulation;
            @DirectionalManipulation.performed += instance.OnDirectionalManipulation;
            @DirectionalManipulation.canceled += instance.OnDirectionalManipulation;
            @ScaleToggle.started += instance.OnScaleToggle;
            @ScaleToggle.performed += instance.OnScaleToggle;
            @ScaleToggle.canceled += instance.OnScaleToggle;
            @ScaleOverTime.started += instance.OnScaleOverTime;
            @ScaleOverTime.performed += instance.OnScaleOverTime;
            @ScaleOverTime.canceled += instance.OnScaleOverTime;
            @XHold.started += instance.OnXHold;
            @XHold.performed += instance.OnXHold;
            @XHold.canceled += instance.OnXHold;
            @XAbilityActivate.started += instance.OnXAbilityActivate;
            @XAbilityActivate.performed += instance.OnXAbilityActivate;
            @XAbilityActivate.canceled += instance.OnXAbilityActivate;
            @XDoubleTap.started += instance.OnXDoubleTap;
            @XDoubleTap.performed += instance.OnXDoubleTap;
            @XDoubleTap.canceled += instance.OnXDoubleTap;
            @YHold.started += instance.OnYHold;
            @YHold.performed += instance.OnYHold;
            @YHold.canceled += instance.OnYHold;
            @YAbilityActivate.started += instance.OnYAbilityActivate;
            @YAbilityActivate.performed += instance.OnYAbilityActivate;
            @YAbilityActivate.canceled += instance.OnYAbilityActivate;
            @YDoubleTab.started += instance.OnYDoubleTab;
            @YDoubleTab.performed += instance.OnYDoubleTab;
            @YDoubleTab.canceled += instance.OnYDoubleTab;
            @JoystickPress.started += instance.OnJoystickPress;
            @JoystickPress.performed += instance.OnJoystickPress;
            @JoystickPress.canceled += instance.OnJoystickPress;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="XRILeftInteractionActions" />
        private void UnregisterCallbacks(IXRILeftInteractionActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @SelectValue.started -= instance.OnSelectValue;
            @SelectValue.performed -= instance.OnSelectValue;
            @SelectValue.canceled -= instance.OnSelectValue;
            @Activate.started -= instance.OnActivate;
            @Activate.performed -= instance.OnActivate;
            @Activate.canceled -= instance.OnActivate;
            @ActivateValue.started -= instance.OnActivateValue;
            @ActivateValue.performed -= instance.OnActivateValue;
            @ActivateValue.canceled -= instance.OnActivateValue;
            @UIPress.started -= instance.OnUIPress;
            @UIPress.performed -= instance.OnUIPress;
            @UIPress.canceled -= instance.OnUIPress;
            @UIPressValue.started -= instance.OnUIPressValue;
            @UIPressValue.performed -= instance.OnUIPressValue;
            @UIPressValue.canceled -= instance.OnUIPressValue;
            @UIScroll.started -= instance.OnUIScroll;
            @UIScroll.performed -= instance.OnUIScroll;
            @UIScroll.canceled -= instance.OnUIScroll;
            @TranslateManipulation.started -= instance.OnTranslateManipulation;
            @TranslateManipulation.performed -= instance.OnTranslateManipulation;
            @TranslateManipulation.canceled -= instance.OnTranslateManipulation;
            @RotateManipulation.started -= instance.OnRotateManipulation;
            @RotateManipulation.performed -= instance.OnRotateManipulation;
            @RotateManipulation.canceled -= instance.OnRotateManipulation;
            @DirectionalManipulation.started -= instance.OnDirectionalManipulation;
            @DirectionalManipulation.performed -= instance.OnDirectionalManipulation;
            @DirectionalManipulation.canceled -= instance.OnDirectionalManipulation;
            @ScaleToggle.started -= instance.OnScaleToggle;
            @ScaleToggle.performed -= instance.OnScaleToggle;
            @ScaleToggle.canceled -= instance.OnScaleToggle;
            @ScaleOverTime.started -= instance.OnScaleOverTime;
            @ScaleOverTime.performed -= instance.OnScaleOverTime;
            @ScaleOverTime.canceled -= instance.OnScaleOverTime;
            @XHold.started -= instance.OnXHold;
            @XHold.performed -= instance.OnXHold;
            @XHold.canceled -= instance.OnXHold;
            @XAbilityActivate.started -= instance.OnXAbilityActivate;
            @XAbilityActivate.performed -= instance.OnXAbilityActivate;
            @XAbilityActivate.canceled -= instance.OnXAbilityActivate;
            @XDoubleTap.started -= instance.OnXDoubleTap;
            @XDoubleTap.performed -= instance.OnXDoubleTap;
            @XDoubleTap.canceled -= instance.OnXDoubleTap;
            @YHold.started -= instance.OnYHold;
            @YHold.performed -= instance.OnYHold;
            @YHold.canceled -= instance.OnYHold;
            @YAbilityActivate.started -= instance.OnYAbilityActivate;
            @YAbilityActivate.performed -= instance.OnYAbilityActivate;
            @YAbilityActivate.canceled -= instance.OnYAbilityActivate;
            @YDoubleTab.started -= instance.OnYDoubleTab;
            @YDoubleTab.performed -= instance.OnYDoubleTab;
            @YDoubleTab.canceled -= instance.OnYDoubleTab;
            @JoystickPress.started -= instance.OnJoystickPress;
            @JoystickPress.performed -= instance.OnJoystickPress;
            @JoystickPress.canceled -= instance.OnJoystickPress;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="XRILeftInteractionActions.UnregisterCallbacks(IXRILeftInteractionActions)" />.
        /// </summary>
        /// <seealso cref="XRILeftInteractionActions.UnregisterCallbacks(IXRILeftInteractionActions)" />
        public void RemoveCallbacks(IXRILeftInteractionActions instance)
        {
            if (m_Wrapper.m_XRILeftInteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="XRILeftInteractionActions.AddCallbacks(IXRILeftInteractionActions)" />
        /// <seealso cref="XRILeftInteractionActions.RemoveCallbacks(IXRILeftInteractionActions)" />
        /// <seealso cref="XRILeftInteractionActions.UnregisterCallbacks(IXRILeftInteractionActions)" />
        public void SetCallbacks(IXRILeftInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_XRILeftInteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRILeftInteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="XRILeftInteractionActions" /> instance referencing this action map.
    /// </summary>
    public XRILeftInteractionActions @XRILeftInteraction => new XRILeftInteractionActions(this);

    // XRI Left Locomotion
    private readonly InputActionMap m_XRILeftLocomotion;
    private List<IXRILeftLocomotionActions> m_XRILeftLocomotionActionsCallbackInterfaces = new List<IXRILeftLocomotionActions>();
    private readonly InputAction m_XRILeftLocomotion_TeleportMode;
    private readonly InputAction m_XRILeftLocomotion_TeleportModeCancel;
    private readonly InputAction m_XRILeftLocomotion_Turn;
    private readonly InputAction m_XRILeftLocomotion_SnapTurn;
    private readonly InputAction m_XRILeftLocomotion_Move;
    private readonly InputAction m_XRILeftLocomotion_GrabMove;
    /// <summary>
    /// Provides access to input actions defined in input action map "XRI Left Locomotion".
    /// </summary>
    public struct XRILeftLocomotionActions
    {
        private @XRIDefaultInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public XRILeftLocomotionActions(@XRIDefaultInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "XRILeftLocomotion/TeleportMode".
        /// </summary>
        public InputAction @TeleportMode => m_Wrapper.m_XRILeftLocomotion_TeleportMode;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftLocomotion/TeleportModeCancel".
        /// </summary>
        public InputAction @TeleportModeCancel => m_Wrapper.m_XRILeftLocomotion_TeleportModeCancel;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftLocomotion/Turn".
        /// </summary>
        public InputAction @Turn => m_Wrapper.m_XRILeftLocomotion_Turn;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftLocomotion/SnapTurn".
        /// </summary>
        public InputAction @SnapTurn => m_Wrapper.m_XRILeftLocomotion_SnapTurn;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftLocomotion/Move".
        /// </summary>
        public InputAction @Move => m_Wrapper.m_XRILeftLocomotion_Move;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftLocomotion/GrabMove".
        /// </summary>
        public InputAction @GrabMove => m_Wrapper.m_XRILeftLocomotion_GrabMove;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_XRILeftLocomotion; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="XRILeftLocomotionActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(XRILeftLocomotionActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="XRILeftLocomotionActions" />
        public void AddCallbacks(IXRILeftLocomotionActions instance)
        {
            if (instance == null || m_Wrapper.m_XRILeftLocomotionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRILeftLocomotionActionsCallbackInterfaces.Add(instance);
            @TeleportMode.started += instance.OnTeleportMode;
            @TeleportMode.performed += instance.OnTeleportMode;
            @TeleportMode.canceled += instance.OnTeleportMode;
            @TeleportModeCancel.started += instance.OnTeleportModeCancel;
            @TeleportModeCancel.performed += instance.OnTeleportModeCancel;
            @TeleportModeCancel.canceled += instance.OnTeleportModeCancel;
            @Turn.started += instance.OnTurn;
            @Turn.performed += instance.OnTurn;
            @Turn.canceled += instance.OnTurn;
            @SnapTurn.started += instance.OnSnapTurn;
            @SnapTurn.performed += instance.OnSnapTurn;
            @SnapTurn.canceled += instance.OnSnapTurn;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @GrabMove.started += instance.OnGrabMove;
            @GrabMove.performed += instance.OnGrabMove;
            @GrabMove.canceled += instance.OnGrabMove;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="XRILeftLocomotionActions" />
        private void UnregisterCallbacks(IXRILeftLocomotionActions instance)
        {
            @TeleportMode.started -= instance.OnTeleportMode;
            @TeleportMode.performed -= instance.OnTeleportMode;
            @TeleportMode.canceled -= instance.OnTeleportMode;
            @TeleportModeCancel.started -= instance.OnTeleportModeCancel;
            @TeleportModeCancel.performed -= instance.OnTeleportModeCancel;
            @TeleportModeCancel.canceled -= instance.OnTeleportModeCancel;
            @Turn.started -= instance.OnTurn;
            @Turn.performed -= instance.OnTurn;
            @Turn.canceled -= instance.OnTurn;
            @SnapTurn.started -= instance.OnSnapTurn;
            @SnapTurn.performed -= instance.OnSnapTurn;
            @SnapTurn.canceled -= instance.OnSnapTurn;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @GrabMove.started -= instance.OnGrabMove;
            @GrabMove.performed -= instance.OnGrabMove;
            @GrabMove.canceled -= instance.OnGrabMove;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="XRILeftLocomotionActions.UnregisterCallbacks(IXRILeftLocomotionActions)" />.
        /// </summary>
        /// <seealso cref="XRILeftLocomotionActions.UnregisterCallbacks(IXRILeftLocomotionActions)" />
        public void RemoveCallbacks(IXRILeftLocomotionActions instance)
        {
            if (m_Wrapper.m_XRILeftLocomotionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="XRILeftLocomotionActions.AddCallbacks(IXRILeftLocomotionActions)" />
        /// <seealso cref="XRILeftLocomotionActions.RemoveCallbacks(IXRILeftLocomotionActions)" />
        /// <seealso cref="XRILeftLocomotionActions.UnregisterCallbacks(IXRILeftLocomotionActions)" />
        public void SetCallbacks(IXRILeftLocomotionActions instance)
        {
            foreach (var item in m_Wrapper.m_XRILeftLocomotionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRILeftLocomotionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="XRILeftLocomotionActions" /> instance referencing this action map.
    /// </summary>
    public XRILeftLocomotionActions @XRILeftLocomotion => new XRILeftLocomotionActions(this);

    // XRI Right
    private readonly InputActionMap m_XRIRight;
    private List<IXRIRightActions> m_XRIRightActionsCallbackInterfaces = new List<IXRIRightActions>();
    private readonly InputAction m_XRIRight_Position;
    private readonly InputAction m_XRIRight_Rotation;
    private readonly InputAction m_XRIRight_IsTracked;
    private readonly InputAction m_XRIRight_TrackingState;
    private readonly InputAction m_XRIRight_HapticDevice;
    private readonly InputAction m_XRIRight_AimPosition;
    private readonly InputAction m_XRIRight_AimRotation;
    private readonly InputAction m_XRIRight_MetaAimFlags;
    private readonly InputAction m_XRIRight_PinchPosition;
    private readonly InputAction m_XRIRight_PokePosition;
    private readonly InputAction m_XRIRight_PokeRotation;
    private readonly InputAction m_XRIRight_GripPosition;
    private readonly InputAction m_XRIRight_GripRotation;
    private readonly InputAction m_XRIRight_Thumbstick;
    /// <summary>
    /// Provides access to input actions defined in input action map "XRI Right".
    /// </summary>
    public struct XRIRightActions
    {
        private @XRIDefaultInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public XRIRightActions(@XRIDefaultInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "XRIRight/Position".
        /// </summary>
        public InputAction @Position => m_Wrapper.m_XRIRight_Position;
        /// <summary>
        /// Provides access to the underlying input action "XRIRight/Rotation".
        /// </summary>
        public InputAction @Rotation => m_Wrapper.m_XRIRight_Rotation;
        /// <summary>
        /// Provides access to the underlying input action "XRIRight/IsTracked".
        /// </summary>
        public InputAction @IsTracked => m_Wrapper.m_XRIRight_IsTracked;
        /// <summary>
        /// Provides access to the underlying input action "XRIRight/TrackingState".
        /// </summary>
        public InputAction @TrackingState => m_Wrapper.m_XRIRight_TrackingState;
        /// <summary>
        /// Provides access to the underlying input action "XRIRight/HapticDevice".
        /// </summary>
        public InputAction @HapticDevice => m_Wrapper.m_XRIRight_HapticDevice;
        /// <summary>
        /// Provides access to the underlying input action "XRIRight/AimPosition".
        /// </summary>
        public InputAction @AimPosition => m_Wrapper.m_XRIRight_AimPosition;
        /// <summary>
        /// Provides access to the underlying input action "XRIRight/AimRotation".
        /// </summary>
        public InputAction @AimRotation => m_Wrapper.m_XRIRight_AimRotation;
        /// <summary>
        /// Provides access to the underlying input action "XRIRight/MetaAimFlags".
        /// </summary>
        public InputAction @MetaAimFlags => m_Wrapper.m_XRIRight_MetaAimFlags;
        /// <summary>
        /// Provides access to the underlying input action "XRIRight/PinchPosition".
        /// </summary>
        public InputAction @PinchPosition => m_Wrapper.m_XRIRight_PinchPosition;
        /// <summary>
        /// Provides access to the underlying input action "XRIRight/PokePosition".
        /// </summary>
        public InputAction @PokePosition => m_Wrapper.m_XRIRight_PokePosition;
        /// <summary>
        /// Provides access to the underlying input action "XRIRight/PokeRotation".
        /// </summary>
        public InputAction @PokeRotation => m_Wrapper.m_XRIRight_PokeRotation;
        /// <summary>
        /// Provides access to the underlying input action "XRIRight/GripPosition".
        /// </summary>
        public InputAction @GripPosition => m_Wrapper.m_XRIRight_GripPosition;
        /// <summary>
        /// Provides access to the underlying input action "XRIRight/GripRotation".
        /// </summary>
        public InputAction @GripRotation => m_Wrapper.m_XRIRight_GripRotation;
        /// <summary>
        /// Provides access to the underlying input action "XRIRight/Thumbstick".
        /// </summary>
        public InputAction @Thumbstick => m_Wrapper.m_XRIRight_Thumbstick;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_XRIRight; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="XRIRightActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(XRIRightActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="XRIRightActions" />
        public void AddCallbacks(IXRIRightActions instance)
        {
            if (instance == null || m_Wrapper.m_XRIRightActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRIRightActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @IsTracked.started += instance.OnIsTracked;
            @IsTracked.performed += instance.OnIsTracked;
            @IsTracked.canceled += instance.OnIsTracked;
            @TrackingState.started += instance.OnTrackingState;
            @TrackingState.performed += instance.OnTrackingState;
            @TrackingState.canceled += instance.OnTrackingState;
            @HapticDevice.started += instance.OnHapticDevice;
            @HapticDevice.performed += instance.OnHapticDevice;
            @HapticDevice.canceled += instance.OnHapticDevice;
            @AimPosition.started += instance.OnAimPosition;
            @AimPosition.performed += instance.OnAimPosition;
            @AimPosition.canceled += instance.OnAimPosition;
            @AimRotation.started += instance.OnAimRotation;
            @AimRotation.performed += instance.OnAimRotation;
            @AimRotation.canceled += instance.OnAimRotation;
            @MetaAimFlags.started += instance.OnMetaAimFlags;
            @MetaAimFlags.performed += instance.OnMetaAimFlags;
            @MetaAimFlags.canceled += instance.OnMetaAimFlags;
            @PinchPosition.started += instance.OnPinchPosition;
            @PinchPosition.performed += instance.OnPinchPosition;
            @PinchPosition.canceled += instance.OnPinchPosition;
            @PokePosition.started += instance.OnPokePosition;
            @PokePosition.performed += instance.OnPokePosition;
            @PokePosition.canceled += instance.OnPokePosition;
            @PokeRotation.started += instance.OnPokeRotation;
            @PokeRotation.performed += instance.OnPokeRotation;
            @PokeRotation.canceled += instance.OnPokeRotation;
            @GripPosition.started += instance.OnGripPosition;
            @GripPosition.performed += instance.OnGripPosition;
            @GripPosition.canceled += instance.OnGripPosition;
            @GripRotation.started += instance.OnGripRotation;
            @GripRotation.performed += instance.OnGripRotation;
            @GripRotation.canceled += instance.OnGripRotation;
            @Thumbstick.started += instance.OnThumbstick;
            @Thumbstick.performed += instance.OnThumbstick;
            @Thumbstick.canceled += instance.OnThumbstick;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="XRIRightActions" />
        private void UnregisterCallbacks(IXRIRightActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @IsTracked.started -= instance.OnIsTracked;
            @IsTracked.performed -= instance.OnIsTracked;
            @IsTracked.canceled -= instance.OnIsTracked;
            @TrackingState.started -= instance.OnTrackingState;
            @TrackingState.performed -= instance.OnTrackingState;
            @TrackingState.canceled -= instance.OnTrackingState;
            @HapticDevice.started -= instance.OnHapticDevice;
            @HapticDevice.performed -= instance.OnHapticDevice;
            @HapticDevice.canceled -= instance.OnHapticDevice;
            @AimPosition.started -= instance.OnAimPosition;
            @AimPosition.performed -= instance.OnAimPosition;
            @AimPosition.canceled -= instance.OnAimPosition;
            @AimRotation.started -= instance.OnAimRotation;
            @AimRotation.performed -= instance.OnAimRotation;
            @AimRotation.canceled -= instance.OnAimRotation;
            @MetaAimFlags.started -= instance.OnMetaAimFlags;
            @MetaAimFlags.performed -= instance.OnMetaAimFlags;
            @MetaAimFlags.canceled -= instance.OnMetaAimFlags;
            @PinchPosition.started -= instance.OnPinchPosition;
            @PinchPosition.performed -= instance.OnPinchPosition;
            @PinchPosition.canceled -= instance.OnPinchPosition;
            @PokePosition.started -= instance.OnPokePosition;
            @PokePosition.performed -= instance.OnPokePosition;
            @PokePosition.canceled -= instance.OnPokePosition;
            @PokeRotation.started -= instance.OnPokeRotation;
            @PokeRotation.performed -= instance.OnPokeRotation;
            @PokeRotation.canceled -= instance.OnPokeRotation;
            @GripPosition.started -= instance.OnGripPosition;
            @GripPosition.performed -= instance.OnGripPosition;
            @GripPosition.canceled -= instance.OnGripPosition;
            @GripRotation.started -= instance.OnGripRotation;
            @GripRotation.performed -= instance.OnGripRotation;
            @GripRotation.canceled -= instance.OnGripRotation;
            @Thumbstick.started -= instance.OnThumbstick;
            @Thumbstick.performed -= instance.OnThumbstick;
            @Thumbstick.canceled -= instance.OnThumbstick;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="XRIRightActions.UnregisterCallbacks(IXRIRightActions)" />.
        /// </summary>
        /// <seealso cref="XRIRightActions.UnregisterCallbacks(IXRIRightActions)" />
        public void RemoveCallbacks(IXRIRightActions instance)
        {
            if (m_Wrapper.m_XRIRightActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="XRIRightActions.AddCallbacks(IXRIRightActions)" />
        /// <seealso cref="XRIRightActions.RemoveCallbacks(IXRIRightActions)" />
        /// <seealso cref="XRIRightActions.UnregisterCallbacks(IXRIRightActions)" />
        public void SetCallbacks(IXRIRightActions instance)
        {
            foreach (var item in m_Wrapper.m_XRIRightActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRIRightActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="XRIRightActions" /> instance referencing this action map.
    /// </summary>
    public XRIRightActions @XRIRight => new XRIRightActions(this);

    // XRI Right Interaction
    private readonly InputActionMap m_XRIRightInteraction;
    private List<IXRIRightInteractionActions> m_XRIRightInteractionActionsCallbackInterfaces = new List<IXRIRightInteractionActions>();
    private readonly InputAction m_XRIRightInteraction_Select;
    private readonly InputAction m_XRIRightInteraction_SelectValue;
    private readonly InputAction m_XRIRightInteraction_Activate;
    private readonly InputAction m_XRIRightInteraction_ActivateValue;
    private readonly InputAction m_XRIRightInteraction_UIPress;
    private readonly InputAction m_XRIRightInteraction_UIPressValue;
    private readonly InputAction m_XRIRightInteraction_UIScroll;
    private readonly InputAction m_XRIRightInteraction_TranslateManipulation;
    private readonly InputAction m_XRIRightInteraction_RotateManipulation;
    private readonly InputAction m_XRIRightInteraction_DirectionalManipulation;
    private readonly InputAction m_XRIRightInteraction_ScaleToggle;
    private readonly InputAction m_XRIRightInteraction_ScaleOverTime;
    private readonly InputAction m_XRIRightInteraction_A;
    private readonly InputAction m_XRIRightInteraction_B;
    private readonly InputAction m_XRIRightInteraction_RightJoystickPress;
    /// <summary>
    /// Provides access to input actions defined in input action map "XRI Right Interaction".
    /// </summary>
    public struct XRIRightInteractionActions
    {
        private @XRIDefaultInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public XRIRightInteractionActions(@XRIDefaultInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "XRIRightInteraction/Select".
        /// </summary>
        public InputAction @Select => m_Wrapper.m_XRIRightInteraction_Select;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightInteraction/SelectValue".
        /// </summary>
        public InputAction @SelectValue => m_Wrapper.m_XRIRightInteraction_SelectValue;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightInteraction/Activate".
        /// </summary>
        public InputAction @Activate => m_Wrapper.m_XRIRightInteraction_Activate;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightInteraction/ActivateValue".
        /// </summary>
        public InputAction @ActivateValue => m_Wrapper.m_XRIRightInteraction_ActivateValue;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightInteraction/UIPress".
        /// </summary>
        public InputAction @UIPress => m_Wrapper.m_XRIRightInteraction_UIPress;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightInteraction/UIPressValue".
        /// </summary>
        public InputAction @UIPressValue => m_Wrapper.m_XRIRightInteraction_UIPressValue;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightInteraction/UIScroll".
        /// </summary>
        public InputAction @UIScroll => m_Wrapper.m_XRIRightInteraction_UIScroll;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightInteraction/TranslateManipulation".
        /// </summary>
        public InputAction @TranslateManipulation => m_Wrapper.m_XRIRightInteraction_TranslateManipulation;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightInteraction/RotateManipulation".
        /// </summary>
        public InputAction @RotateManipulation => m_Wrapper.m_XRIRightInteraction_RotateManipulation;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightInteraction/DirectionalManipulation".
        /// </summary>
        public InputAction @DirectionalManipulation => m_Wrapper.m_XRIRightInteraction_DirectionalManipulation;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightInteraction/ScaleToggle".
        /// </summary>
        public InputAction @ScaleToggle => m_Wrapper.m_XRIRightInteraction_ScaleToggle;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightInteraction/ScaleOverTime".
        /// </summary>
        public InputAction @ScaleOverTime => m_Wrapper.m_XRIRightInteraction_ScaleOverTime;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightInteraction/A".
        /// </summary>
        public InputAction @A => m_Wrapper.m_XRIRightInteraction_A;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightInteraction/B".
        /// </summary>
        public InputAction @B => m_Wrapper.m_XRIRightInteraction_B;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightInteraction/RightJoystickPress".
        /// </summary>
        public InputAction @RightJoystickPress => m_Wrapper.m_XRIRightInteraction_RightJoystickPress;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_XRIRightInteraction; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="XRIRightInteractionActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(XRIRightInteractionActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="XRIRightInteractionActions" />
        public void AddCallbacks(IXRIRightInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_XRIRightInteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRIRightInteractionActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @SelectValue.started += instance.OnSelectValue;
            @SelectValue.performed += instance.OnSelectValue;
            @SelectValue.canceled += instance.OnSelectValue;
            @Activate.started += instance.OnActivate;
            @Activate.performed += instance.OnActivate;
            @Activate.canceled += instance.OnActivate;
            @ActivateValue.started += instance.OnActivateValue;
            @ActivateValue.performed += instance.OnActivateValue;
            @ActivateValue.canceled += instance.OnActivateValue;
            @UIPress.started += instance.OnUIPress;
            @UIPress.performed += instance.OnUIPress;
            @UIPress.canceled += instance.OnUIPress;
            @UIPressValue.started += instance.OnUIPressValue;
            @UIPressValue.performed += instance.OnUIPressValue;
            @UIPressValue.canceled += instance.OnUIPressValue;
            @UIScroll.started += instance.OnUIScroll;
            @UIScroll.performed += instance.OnUIScroll;
            @UIScroll.canceled += instance.OnUIScroll;
            @TranslateManipulation.started += instance.OnTranslateManipulation;
            @TranslateManipulation.performed += instance.OnTranslateManipulation;
            @TranslateManipulation.canceled += instance.OnTranslateManipulation;
            @RotateManipulation.started += instance.OnRotateManipulation;
            @RotateManipulation.performed += instance.OnRotateManipulation;
            @RotateManipulation.canceled += instance.OnRotateManipulation;
            @DirectionalManipulation.started += instance.OnDirectionalManipulation;
            @DirectionalManipulation.performed += instance.OnDirectionalManipulation;
            @DirectionalManipulation.canceled += instance.OnDirectionalManipulation;
            @ScaleToggle.started += instance.OnScaleToggle;
            @ScaleToggle.performed += instance.OnScaleToggle;
            @ScaleToggle.canceled += instance.OnScaleToggle;
            @ScaleOverTime.started += instance.OnScaleOverTime;
            @ScaleOverTime.performed += instance.OnScaleOverTime;
            @ScaleOverTime.canceled += instance.OnScaleOverTime;
            @A.started += instance.OnA;
            @A.performed += instance.OnA;
            @A.canceled += instance.OnA;
            @B.started += instance.OnB;
            @B.performed += instance.OnB;
            @B.canceled += instance.OnB;
            @RightJoystickPress.started += instance.OnRightJoystickPress;
            @RightJoystickPress.performed += instance.OnRightJoystickPress;
            @RightJoystickPress.canceled += instance.OnRightJoystickPress;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="XRIRightInteractionActions" />
        private void UnregisterCallbacks(IXRIRightInteractionActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @SelectValue.started -= instance.OnSelectValue;
            @SelectValue.performed -= instance.OnSelectValue;
            @SelectValue.canceled -= instance.OnSelectValue;
            @Activate.started -= instance.OnActivate;
            @Activate.performed -= instance.OnActivate;
            @Activate.canceled -= instance.OnActivate;
            @ActivateValue.started -= instance.OnActivateValue;
            @ActivateValue.performed -= instance.OnActivateValue;
            @ActivateValue.canceled -= instance.OnActivateValue;
            @UIPress.started -= instance.OnUIPress;
            @UIPress.performed -= instance.OnUIPress;
            @UIPress.canceled -= instance.OnUIPress;
            @UIPressValue.started -= instance.OnUIPressValue;
            @UIPressValue.performed -= instance.OnUIPressValue;
            @UIPressValue.canceled -= instance.OnUIPressValue;
            @UIScroll.started -= instance.OnUIScroll;
            @UIScroll.performed -= instance.OnUIScroll;
            @UIScroll.canceled -= instance.OnUIScroll;
            @TranslateManipulation.started -= instance.OnTranslateManipulation;
            @TranslateManipulation.performed -= instance.OnTranslateManipulation;
            @TranslateManipulation.canceled -= instance.OnTranslateManipulation;
            @RotateManipulation.started -= instance.OnRotateManipulation;
            @RotateManipulation.performed -= instance.OnRotateManipulation;
            @RotateManipulation.canceled -= instance.OnRotateManipulation;
            @DirectionalManipulation.started -= instance.OnDirectionalManipulation;
            @DirectionalManipulation.performed -= instance.OnDirectionalManipulation;
            @DirectionalManipulation.canceled -= instance.OnDirectionalManipulation;
            @ScaleToggle.started -= instance.OnScaleToggle;
            @ScaleToggle.performed -= instance.OnScaleToggle;
            @ScaleToggle.canceled -= instance.OnScaleToggle;
            @ScaleOverTime.started -= instance.OnScaleOverTime;
            @ScaleOverTime.performed -= instance.OnScaleOverTime;
            @ScaleOverTime.canceled -= instance.OnScaleOverTime;
            @A.started -= instance.OnA;
            @A.performed -= instance.OnA;
            @A.canceled -= instance.OnA;
            @B.started -= instance.OnB;
            @B.performed -= instance.OnB;
            @B.canceled -= instance.OnB;
            @RightJoystickPress.started -= instance.OnRightJoystickPress;
            @RightJoystickPress.performed -= instance.OnRightJoystickPress;
            @RightJoystickPress.canceled -= instance.OnRightJoystickPress;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="XRIRightInteractionActions.UnregisterCallbacks(IXRIRightInteractionActions)" />.
        /// </summary>
        /// <seealso cref="XRIRightInteractionActions.UnregisterCallbacks(IXRIRightInteractionActions)" />
        public void RemoveCallbacks(IXRIRightInteractionActions instance)
        {
            if (m_Wrapper.m_XRIRightInteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="XRIRightInteractionActions.AddCallbacks(IXRIRightInteractionActions)" />
        /// <seealso cref="XRIRightInteractionActions.RemoveCallbacks(IXRIRightInteractionActions)" />
        /// <seealso cref="XRIRightInteractionActions.UnregisterCallbacks(IXRIRightInteractionActions)" />
        public void SetCallbacks(IXRIRightInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_XRIRightInteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRIRightInteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="XRIRightInteractionActions" /> instance referencing this action map.
    /// </summary>
    public XRIRightInteractionActions @XRIRightInteraction => new XRIRightInteractionActions(this);

    // XRI Right Locomotion
    private readonly InputActionMap m_XRIRightLocomotion;
    private List<IXRIRightLocomotionActions> m_XRIRightLocomotionActionsCallbackInterfaces = new List<IXRIRightLocomotionActions>();
    private readonly InputAction m_XRIRightLocomotion_TeleportMode;
    private readonly InputAction m_XRIRightLocomotion_TeleportModeCancel;
    private readonly InputAction m_XRIRightLocomotion_Turn;
    private readonly InputAction m_XRIRightLocomotion_SnapTurn;
    private readonly InputAction m_XRIRightLocomotion_Move;
    private readonly InputAction m_XRIRightLocomotion_GrabMove;
    /// <summary>
    /// Provides access to input actions defined in input action map "XRI Right Locomotion".
    /// </summary>
    public struct XRIRightLocomotionActions
    {
        private @XRIDefaultInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public XRIRightLocomotionActions(@XRIDefaultInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "XRIRightLocomotion/TeleportMode".
        /// </summary>
        public InputAction @TeleportMode => m_Wrapper.m_XRIRightLocomotion_TeleportMode;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightLocomotion/TeleportModeCancel".
        /// </summary>
        public InputAction @TeleportModeCancel => m_Wrapper.m_XRIRightLocomotion_TeleportModeCancel;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightLocomotion/Turn".
        /// </summary>
        public InputAction @Turn => m_Wrapper.m_XRIRightLocomotion_Turn;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightLocomotion/SnapTurn".
        /// </summary>
        public InputAction @SnapTurn => m_Wrapper.m_XRIRightLocomotion_SnapTurn;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightLocomotion/Move".
        /// </summary>
        public InputAction @Move => m_Wrapper.m_XRIRightLocomotion_Move;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightLocomotion/GrabMove".
        /// </summary>
        public InputAction @GrabMove => m_Wrapper.m_XRIRightLocomotion_GrabMove;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_XRIRightLocomotion; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="XRIRightLocomotionActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(XRIRightLocomotionActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="XRIRightLocomotionActions" />
        public void AddCallbacks(IXRIRightLocomotionActions instance)
        {
            if (instance == null || m_Wrapper.m_XRIRightLocomotionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRIRightLocomotionActionsCallbackInterfaces.Add(instance);
            @TeleportMode.started += instance.OnTeleportMode;
            @TeleportMode.performed += instance.OnTeleportMode;
            @TeleportMode.canceled += instance.OnTeleportMode;
            @TeleportModeCancel.started += instance.OnTeleportModeCancel;
            @TeleportModeCancel.performed += instance.OnTeleportModeCancel;
            @TeleportModeCancel.canceled += instance.OnTeleportModeCancel;
            @Turn.started += instance.OnTurn;
            @Turn.performed += instance.OnTurn;
            @Turn.canceled += instance.OnTurn;
            @SnapTurn.started += instance.OnSnapTurn;
            @SnapTurn.performed += instance.OnSnapTurn;
            @SnapTurn.canceled += instance.OnSnapTurn;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @GrabMove.started += instance.OnGrabMove;
            @GrabMove.performed += instance.OnGrabMove;
            @GrabMove.canceled += instance.OnGrabMove;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="XRIRightLocomotionActions" />
        private void UnregisterCallbacks(IXRIRightLocomotionActions instance)
        {
            @TeleportMode.started -= instance.OnTeleportMode;
            @TeleportMode.performed -= instance.OnTeleportMode;
            @TeleportMode.canceled -= instance.OnTeleportMode;
            @TeleportModeCancel.started -= instance.OnTeleportModeCancel;
            @TeleportModeCancel.performed -= instance.OnTeleportModeCancel;
            @TeleportModeCancel.canceled -= instance.OnTeleportModeCancel;
            @Turn.started -= instance.OnTurn;
            @Turn.performed -= instance.OnTurn;
            @Turn.canceled -= instance.OnTurn;
            @SnapTurn.started -= instance.OnSnapTurn;
            @SnapTurn.performed -= instance.OnSnapTurn;
            @SnapTurn.canceled -= instance.OnSnapTurn;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @GrabMove.started -= instance.OnGrabMove;
            @GrabMove.performed -= instance.OnGrabMove;
            @GrabMove.canceled -= instance.OnGrabMove;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="XRIRightLocomotionActions.UnregisterCallbacks(IXRIRightLocomotionActions)" />.
        /// </summary>
        /// <seealso cref="XRIRightLocomotionActions.UnregisterCallbacks(IXRIRightLocomotionActions)" />
        public void RemoveCallbacks(IXRIRightLocomotionActions instance)
        {
            if (m_Wrapper.m_XRIRightLocomotionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="XRIRightLocomotionActions.AddCallbacks(IXRIRightLocomotionActions)" />
        /// <seealso cref="XRIRightLocomotionActions.RemoveCallbacks(IXRIRightLocomotionActions)" />
        /// <seealso cref="XRIRightLocomotionActions.UnregisterCallbacks(IXRIRightLocomotionActions)" />
        public void SetCallbacks(IXRIRightLocomotionActions instance)
        {
            foreach (var item in m_Wrapper.m_XRIRightLocomotionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRIRightLocomotionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="XRIRightLocomotionActions" /> instance referencing this action map.
    /// </summary>
    public XRIRightLocomotionActions @XRIRightLocomotion => new XRIRightLocomotionActions(this);

    // XRI UI
    private readonly InputActionMap m_XRIUI;
    private List<IXRIUIActions> m_XRIUIActionsCallbackInterfaces = new List<IXRIUIActions>();
    private readonly InputAction m_XRIUI_Navigate;
    private readonly InputAction m_XRIUI_Submit;
    private readonly InputAction m_XRIUI_Cancel;
    private readonly InputAction m_XRIUI_Point;
    private readonly InputAction m_XRIUI_Click;
    private readonly InputAction m_XRIUI_ScrollWheel;
    private readonly InputAction m_XRIUI_MiddleClick;
    private readonly InputAction m_XRIUI_RightClick;
    /// <summary>
    /// Provides access to input actions defined in input action map "XRI UI".
    /// </summary>
    public struct XRIUIActions
    {
        private @XRIDefaultInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public XRIUIActions(@XRIDefaultInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "XRIUI/Navigate".
        /// </summary>
        public InputAction @Navigate => m_Wrapper.m_XRIUI_Navigate;
        /// <summary>
        /// Provides access to the underlying input action "XRIUI/Submit".
        /// </summary>
        public InputAction @Submit => m_Wrapper.m_XRIUI_Submit;
        /// <summary>
        /// Provides access to the underlying input action "XRIUI/Cancel".
        /// </summary>
        public InputAction @Cancel => m_Wrapper.m_XRIUI_Cancel;
        /// <summary>
        /// Provides access to the underlying input action "XRIUI/Point".
        /// </summary>
        public InputAction @Point => m_Wrapper.m_XRIUI_Point;
        /// <summary>
        /// Provides access to the underlying input action "XRIUI/Click".
        /// </summary>
        public InputAction @Click => m_Wrapper.m_XRIUI_Click;
        /// <summary>
        /// Provides access to the underlying input action "XRIUI/ScrollWheel".
        /// </summary>
        public InputAction @ScrollWheel => m_Wrapper.m_XRIUI_ScrollWheel;
        /// <summary>
        /// Provides access to the underlying input action "XRIUI/MiddleClick".
        /// </summary>
        public InputAction @MiddleClick => m_Wrapper.m_XRIUI_MiddleClick;
        /// <summary>
        /// Provides access to the underlying input action "XRIUI/RightClick".
        /// </summary>
        public InputAction @RightClick => m_Wrapper.m_XRIUI_RightClick;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_XRIUI; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="XRIUIActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(XRIUIActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="XRIUIActions" />
        public void AddCallbacks(IXRIUIActions instance)
        {
            if (instance == null || m_Wrapper.m_XRIUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRIUIActionsCallbackInterfaces.Add(instance);
            @Navigate.started += instance.OnNavigate;
            @Navigate.performed += instance.OnNavigate;
            @Navigate.canceled += instance.OnNavigate;
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
            @Point.started += instance.OnPoint;
            @Point.performed += instance.OnPoint;
            @Point.canceled += instance.OnPoint;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @ScrollWheel.started += instance.OnScrollWheel;
            @ScrollWheel.performed += instance.OnScrollWheel;
            @ScrollWheel.canceled += instance.OnScrollWheel;
            @MiddleClick.started += instance.OnMiddleClick;
            @MiddleClick.performed += instance.OnMiddleClick;
            @MiddleClick.canceled += instance.OnMiddleClick;
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="XRIUIActions" />
        private void UnregisterCallbacks(IXRIUIActions instance)
        {
            @Navigate.started -= instance.OnNavigate;
            @Navigate.performed -= instance.OnNavigate;
            @Navigate.canceled -= instance.OnNavigate;
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
            @Point.started -= instance.OnPoint;
            @Point.performed -= instance.OnPoint;
            @Point.canceled -= instance.OnPoint;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @ScrollWheel.started -= instance.OnScrollWheel;
            @ScrollWheel.performed -= instance.OnScrollWheel;
            @ScrollWheel.canceled -= instance.OnScrollWheel;
            @MiddleClick.started -= instance.OnMiddleClick;
            @MiddleClick.performed -= instance.OnMiddleClick;
            @MiddleClick.canceled -= instance.OnMiddleClick;
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="XRIUIActions.UnregisterCallbacks(IXRIUIActions)" />.
        /// </summary>
        /// <seealso cref="XRIUIActions.UnregisterCallbacks(IXRIUIActions)" />
        public void RemoveCallbacks(IXRIUIActions instance)
        {
            if (m_Wrapper.m_XRIUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="XRIUIActions.AddCallbacks(IXRIUIActions)" />
        /// <seealso cref="XRIUIActions.RemoveCallbacks(IXRIUIActions)" />
        /// <seealso cref="XRIUIActions.UnregisterCallbacks(IXRIUIActions)" />
        public void SetCallbacks(IXRIUIActions instance)
        {
            foreach (var item in m_Wrapper.m_XRIUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRIUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="XRIUIActions" /> instance referencing this action map.
    /// </summary>
    public XRIUIActions @XRIUI => new XRIUIActions(this);

    // Touchscreen Gestures
    private readonly InputActionMap m_TouchscreenGestures;
    private List<ITouchscreenGesturesActions> m_TouchscreenGesturesActionsCallbackInterfaces = new List<ITouchscreenGesturesActions>();
    private readonly InputAction m_TouchscreenGestures_TapStartPosition;
    private readonly InputAction m_TouchscreenGestures_DragCurrentPosition;
    private readonly InputAction m_TouchscreenGestures_DragDelta;
    private readonly InputAction m_TouchscreenGestures_PinchStartPosition;
    private readonly InputAction m_TouchscreenGestures_PinchGap;
    private readonly InputAction m_TouchscreenGestures_PinchGapDelta;
    private readonly InputAction m_TouchscreenGestures_TwistStartPosition;
    private readonly InputAction m_TouchscreenGestures_TwistDeltaRotation;
    private readonly InputAction m_TouchscreenGestures_ScreenTouchCount;
    private readonly InputAction m_TouchscreenGestures_SpawnObject;
    /// <summary>
    /// Provides access to input actions defined in input action map "Touchscreen Gestures".
    /// </summary>
    public struct TouchscreenGesturesActions
    {
        private @XRIDefaultInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public TouchscreenGesturesActions(@XRIDefaultInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "TouchscreenGestures/TapStartPosition".
        /// </summary>
        public InputAction @TapStartPosition => m_Wrapper.m_TouchscreenGestures_TapStartPosition;
        /// <summary>
        /// Provides access to the underlying input action "TouchscreenGestures/DragCurrentPosition".
        /// </summary>
        public InputAction @DragCurrentPosition => m_Wrapper.m_TouchscreenGestures_DragCurrentPosition;
        /// <summary>
        /// Provides access to the underlying input action "TouchscreenGestures/DragDelta".
        /// </summary>
        public InputAction @DragDelta => m_Wrapper.m_TouchscreenGestures_DragDelta;
        /// <summary>
        /// Provides access to the underlying input action "TouchscreenGestures/PinchStartPosition".
        /// </summary>
        public InputAction @PinchStartPosition => m_Wrapper.m_TouchscreenGestures_PinchStartPosition;
        /// <summary>
        /// Provides access to the underlying input action "TouchscreenGestures/PinchGap".
        /// </summary>
        public InputAction @PinchGap => m_Wrapper.m_TouchscreenGestures_PinchGap;
        /// <summary>
        /// Provides access to the underlying input action "TouchscreenGestures/PinchGapDelta".
        /// </summary>
        public InputAction @PinchGapDelta => m_Wrapper.m_TouchscreenGestures_PinchGapDelta;
        /// <summary>
        /// Provides access to the underlying input action "TouchscreenGestures/TwistStartPosition".
        /// </summary>
        public InputAction @TwistStartPosition => m_Wrapper.m_TouchscreenGestures_TwistStartPosition;
        /// <summary>
        /// Provides access to the underlying input action "TouchscreenGestures/TwistDeltaRotation".
        /// </summary>
        public InputAction @TwistDeltaRotation => m_Wrapper.m_TouchscreenGestures_TwistDeltaRotation;
        /// <summary>
        /// Provides access to the underlying input action "TouchscreenGestures/ScreenTouchCount".
        /// </summary>
        public InputAction @ScreenTouchCount => m_Wrapper.m_TouchscreenGestures_ScreenTouchCount;
        /// <summary>
        /// Provides access to the underlying input action "TouchscreenGestures/SpawnObject".
        /// </summary>
        public InputAction @SpawnObject => m_Wrapper.m_TouchscreenGestures_SpawnObject;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_TouchscreenGestures; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="TouchscreenGesturesActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(TouchscreenGesturesActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="TouchscreenGesturesActions" />
        public void AddCallbacks(ITouchscreenGesturesActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchscreenGesturesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchscreenGesturesActionsCallbackInterfaces.Add(instance);
            @TapStartPosition.started += instance.OnTapStartPosition;
            @TapStartPosition.performed += instance.OnTapStartPosition;
            @TapStartPosition.canceled += instance.OnTapStartPosition;
            @DragCurrentPosition.started += instance.OnDragCurrentPosition;
            @DragCurrentPosition.performed += instance.OnDragCurrentPosition;
            @DragCurrentPosition.canceled += instance.OnDragCurrentPosition;
            @DragDelta.started += instance.OnDragDelta;
            @DragDelta.performed += instance.OnDragDelta;
            @DragDelta.canceled += instance.OnDragDelta;
            @PinchStartPosition.started += instance.OnPinchStartPosition;
            @PinchStartPosition.performed += instance.OnPinchStartPosition;
            @PinchStartPosition.canceled += instance.OnPinchStartPosition;
            @PinchGap.started += instance.OnPinchGap;
            @PinchGap.performed += instance.OnPinchGap;
            @PinchGap.canceled += instance.OnPinchGap;
            @PinchGapDelta.started += instance.OnPinchGapDelta;
            @PinchGapDelta.performed += instance.OnPinchGapDelta;
            @PinchGapDelta.canceled += instance.OnPinchGapDelta;
            @TwistStartPosition.started += instance.OnTwistStartPosition;
            @TwistStartPosition.performed += instance.OnTwistStartPosition;
            @TwistStartPosition.canceled += instance.OnTwistStartPosition;
            @TwistDeltaRotation.started += instance.OnTwistDeltaRotation;
            @TwistDeltaRotation.performed += instance.OnTwistDeltaRotation;
            @TwistDeltaRotation.canceled += instance.OnTwistDeltaRotation;
            @ScreenTouchCount.started += instance.OnScreenTouchCount;
            @ScreenTouchCount.performed += instance.OnScreenTouchCount;
            @ScreenTouchCount.canceled += instance.OnScreenTouchCount;
            @SpawnObject.started += instance.OnSpawnObject;
            @SpawnObject.performed += instance.OnSpawnObject;
            @SpawnObject.canceled += instance.OnSpawnObject;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="TouchscreenGesturesActions" />
        private void UnregisterCallbacks(ITouchscreenGesturesActions instance)
        {
            @TapStartPosition.started -= instance.OnTapStartPosition;
            @TapStartPosition.performed -= instance.OnTapStartPosition;
            @TapStartPosition.canceled -= instance.OnTapStartPosition;
            @DragCurrentPosition.started -= instance.OnDragCurrentPosition;
            @DragCurrentPosition.performed -= instance.OnDragCurrentPosition;
            @DragCurrentPosition.canceled -= instance.OnDragCurrentPosition;
            @DragDelta.started -= instance.OnDragDelta;
            @DragDelta.performed -= instance.OnDragDelta;
            @DragDelta.canceled -= instance.OnDragDelta;
            @PinchStartPosition.started -= instance.OnPinchStartPosition;
            @PinchStartPosition.performed -= instance.OnPinchStartPosition;
            @PinchStartPosition.canceled -= instance.OnPinchStartPosition;
            @PinchGap.started -= instance.OnPinchGap;
            @PinchGap.performed -= instance.OnPinchGap;
            @PinchGap.canceled -= instance.OnPinchGap;
            @PinchGapDelta.started -= instance.OnPinchGapDelta;
            @PinchGapDelta.performed -= instance.OnPinchGapDelta;
            @PinchGapDelta.canceled -= instance.OnPinchGapDelta;
            @TwistStartPosition.started -= instance.OnTwistStartPosition;
            @TwistStartPosition.performed -= instance.OnTwistStartPosition;
            @TwistStartPosition.canceled -= instance.OnTwistStartPosition;
            @TwistDeltaRotation.started -= instance.OnTwistDeltaRotation;
            @TwistDeltaRotation.performed -= instance.OnTwistDeltaRotation;
            @TwistDeltaRotation.canceled -= instance.OnTwistDeltaRotation;
            @ScreenTouchCount.started -= instance.OnScreenTouchCount;
            @ScreenTouchCount.performed -= instance.OnScreenTouchCount;
            @ScreenTouchCount.canceled -= instance.OnScreenTouchCount;
            @SpawnObject.started -= instance.OnSpawnObject;
            @SpawnObject.performed -= instance.OnSpawnObject;
            @SpawnObject.canceled -= instance.OnSpawnObject;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="TouchscreenGesturesActions.UnregisterCallbacks(ITouchscreenGesturesActions)" />.
        /// </summary>
        /// <seealso cref="TouchscreenGesturesActions.UnregisterCallbacks(ITouchscreenGesturesActions)" />
        public void RemoveCallbacks(ITouchscreenGesturesActions instance)
        {
            if (m_Wrapper.m_TouchscreenGesturesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="TouchscreenGesturesActions.AddCallbacks(ITouchscreenGesturesActions)" />
        /// <seealso cref="TouchscreenGesturesActions.RemoveCallbacks(ITouchscreenGesturesActions)" />
        /// <seealso cref="TouchscreenGesturesActions.UnregisterCallbacks(ITouchscreenGesturesActions)" />
        public void SetCallbacks(ITouchscreenGesturesActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchscreenGesturesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchscreenGesturesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="TouchscreenGesturesActions" /> instance referencing this action map.
    /// </summary>
    public TouchscreenGesturesActions @TouchscreenGestures => new TouchscreenGesturesActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "XRI Head" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="XRIHeadActions.AddCallbacks(IXRIHeadActions)" />
    /// <seealso cref="XRIHeadActions.RemoveCallbacks(IXRIHeadActions)" />
    public interface IXRIHeadActions
    {
        /// <summary>
        /// Method invoked when associated input action "Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Is Tracked" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnIsTracked(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Tracking State" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTrackingState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Eye Gaze Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnEyeGazePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Eye Gaze Rotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnEyeGazeRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Eye Gaze Is Tracked" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnEyeGazeIsTracked(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Eye Gaze Tracking State" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnEyeGazeTrackingState(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "XRI Left" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="XRILeftActions.AddCallbacks(IXRILeftActions)" />
    /// <seealso cref="XRILeftActions.RemoveCallbacks(IXRILeftActions)" />
    public interface IXRILeftActions
    {
        /// <summary>
        /// Method invoked when associated input action "Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Is Tracked" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnIsTracked(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Tracking State" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTrackingState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Haptic Device" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHapticDevice(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Aim Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAimPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Aim Rotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAimRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Meta Aim Flags" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMetaAimFlags(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Pinch Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPinchPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Poke Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPokePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Poke Rotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPokeRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Grip Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGripPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Grip Rotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGripRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Thumbstick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnThumbstick(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "XRI Left Interaction" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="XRILeftInteractionActions.AddCallbacks(IXRILeftInteractionActions)" />
    /// <seealso cref="XRILeftInteractionActions.RemoveCallbacks(IXRILeftInteractionActions)" />
    public interface IXRILeftInteractionActions
    {
        /// <summary>
        /// Method invoked when associated input action "Select" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelect(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Select Value" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Activate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnActivate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Activate Value" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnActivateValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UI Press" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUIPress(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UI Press Value" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUIPressValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UI Scroll" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUIScroll(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Translate Manipulation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTranslateManipulation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotate Manipulation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotateManipulation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Directional Manipulation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDirectionalManipulation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Scale Toggle" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScaleToggle(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Scale Over Time" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScaleOverTime(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "XHold" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnXHold(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "XAbilityActivate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnXAbilityActivate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "XDoubleTap" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnXDoubleTap(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "YHold" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnYHold(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "YAbilityActivate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnYAbilityActivate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "YDoubleTab" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnYDoubleTab(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "JoystickPress" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnJoystickPress(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "XRI Left Locomotion" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="XRILeftLocomotionActions.AddCallbacks(IXRILeftLocomotionActions)" />
    /// <seealso cref="XRILeftLocomotionActions.RemoveCallbacks(IXRILeftLocomotionActions)" />
    public interface IXRILeftLocomotionActions
    {
        /// <summary>
        /// Method invoked when associated input action "Teleport Mode" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTeleportMode(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Teleport Mode Cancel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTeleportModeCancel(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Turn" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTurn(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Snap Turn" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSnapTurn(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Grab Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGrabMove(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "XRI Right" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="XRIRightActions.AddCallbacks(IXRIRightActions)" />
    /// <seealso cref="XRIRightActions.RemoveCallbacks(IXRIRightActions)" />
    public interface IXRIRightActions
    {
        /// <summary>
        /// Method invoked when associated input action "Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Is Tracked" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnIsTracked(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Tracking State" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTrackingState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Haptic Device" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHapticDevice(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Aim Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAimPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Aim Rotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAimRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Meta Aim Flags" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMetaAimFlags(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Pinch Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPinchPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Poke Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPokePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Poke Rotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPokeRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Grip Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGripPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Grip Rotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGripRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Thumbstick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnThumbstick(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "XRI Right Interaction" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="XRIRightInteractionActions.AddCallbacks(IXRIRightInteractionActions)" />
    /// <seealso cref="XRIRightInteractionActions.RemoveCallbacks(IXRIRightInteractionActions)" />
    public interface IXRIRightInteractionActions
    {
        /// <summary>
        /// Method invoked when associated input action "Select" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelect(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Select Value" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Activate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnActivate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Activate Value" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnActivateValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UI Press" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUIPress(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UI Press Value" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUIPressValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UI Scroll" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUIScroll(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Translate Manipulation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTranslateManipulation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotate Manipulation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotateManipulation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Directional Manipulation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDirectionalManipulation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Scale Toggle" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScaleToggle(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Scale Over Time" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScaleOverTime(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "A" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnA(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "B" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnB(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightJoystickPress" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightJoystickPress(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "XRI Right Locomotion" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="XRIRightLocomotionActions.AddCallbacks(IXRIRightLocomotionActions)" />
    /// <seealso cref="XRIRightLocomotionActions.RemoveCallbacks(IXRIRightLocomotionActions)" />
    public interface IXRIRightLocomotionActions
    {
        /// <summary>
        /// Method invoked when associated input action "Teleport Mode" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTeleportMode(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Teleport Mode Cancel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTeleportModeCancel(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Turn" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTurn(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Snap Turn" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSnapTurn(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Grab Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGrabMove(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "XRI UI" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="XRIUIActions.AddCallbacks(IXRIUIActions)" />
    /// <seealso cref="XRIUIActions.RemoveCallbacks(IXRIUIActions)" />
    public interface IXRIUIActions
    {
        /// <summary>
        /// Method invoked when associated input action "Navigate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNavigate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Submit" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSubmit(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Cancel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCancel(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Point" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPoint(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Click" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ScrollWheel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScrollWheel(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MiddleClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMiddleClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightClick(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Touchscreen Gestures" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="TouchscreenGesturesActions.AddCallbacks(ITouchscreenGesturesActions)" />
    /// <seealso cref="TouchscreenGesturesActions.RemoveCallbacks(ITouchscreenGesturesActions)" />
    public interface ITouchscreenGesturesActions
    {
        /// <summary>
        /// Method invoked when associated input action "Tap Start Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTapStartPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Drag Current Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDragCurrentPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Drag Delta" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDragDelta(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Pinch Start Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPinchStartPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Pinch Gap" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPinchGap(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Pinch Gap Delta" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPinchGapDelta(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Twist Start Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTwistStartPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Twist Delta Rotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTwistDeltaRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Screen Touch Count" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScreenTouchCount(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Spawn Object" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSpawnObject(InputAction.CallbackContext context);
    }
}
